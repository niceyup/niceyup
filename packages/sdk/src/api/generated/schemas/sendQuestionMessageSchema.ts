/**
 * Generated by Kubb (https://kubb.dev/).
 * Do not edit manually.
 */

import type {
  SendQuestionMessagePathParams,
  SendQuestionMessage200,
  SendQuestionMessage400,
  SendQuestionMessage401,
  SendQuestionMessage403,
  SendQuestionMessage404,
  SendQuestionMessage429,
  SendQuestionMessage500,
  SendQuestionMessageMutationRequest,
  SendQuestionMessageMutationResponse,
} from '../types/SendQuestionMessage'
import type { ToZod } from '@kubb/plugin-zod/utils'
import { z } from 'zod'

export const sendQuestionMessagePathParamsSchema = z.object({
  conversationId: z.string(),
}) as unknown as ToZod<SendQuestionMessagePathParams>

export type SendQuestionMessagePathParamsSchema = SendQuestionMessagePathParams

/**
 * @description Success
 */
export const sendQuestionMessage200Schema = z
  .object({
    conversationId: z.string(),
    questionMessage: z.object({
      id: z.string(),
      parts: z.array(z.any()).nullable(),
      authorId: z.string().nullable().nullish(),
      parentId: z.string().nullable().nullish(),
      children: z.array(z.string()).optional(),
    }),
    answerMessage: z.object({
      id: z.string(),
      parts: z.array(z.any()).nullable(),
      authorId: z.string().nullable().nullish(),
      parentId: z.string().nullable().nullish(),
      children: z.array(z.string()).optional(),
    }),
    explorerTree: z
      .object({
        itemId: z.string(),
      })
      .describe(
        'Return only when the conversation is created in the explorerTree',
      )
      .optional(),
  })
  .describe('Success') as unknown as ToZod<SendQuestionMessage200>

export type SendQuestionMessage200Schema = SendQuestionMessage200

/**
 * @description Bad Request. Usually due to missing parameters, or invalid parameters.
 */
export const sendQuestionMessage400Schema = z
  .object({
    code: z.string(),
    message: z.string(),
    errors: z
      .array(
        z
          .object({
            code: z.string(),
            message: z.string(),
            path: z.array(z.union([z.string(), z.number()])),
          })
          .catchall(z.any()),
      )
      .describe('Validation errors')
      .optional(),
  })
  .describe(
    'Bad Request. Usually due to missing parameters, or invalid parameters.',
  ) as unknown as ToZod<SendQuestionMessage400>

export type SendQuestionMessage400Schema = SendQuestionMessage400

/**
 * @description Unauthorized. Due to missing or invalid authentication.
 */
export const sendQuestionMessage401Schema = z
  .object({
    code: z.string(),
    message: z.string(),
  })
  .describe(
    'Unauthorized. Due to missing or invalid authentication.',
  ) as unknown as ToZod<SendQuestionMessage401>

export type SendQuestionMessage401Schema = SendQuestionMessage401

/**
 * @description Forbidden. You do not have permission to access this resource or to perform this action.
 */
export const sendQuestionMessage403Schema = z
  .object({
    message: z.string(),
  })
  .describe(
    'Forbidden. You do not have permission to access this resource or to perform this action.',
  ) as unknown as ToZod<SendQuestionMessage403>

export type SendQuestionMessage403Schema = SendQuestionMessage403

/**
 * @description Not Found. The requested resource was not found.
 */
export const sendQuestionMessage404Schema = z
  .object({
    message: z.string(),
  })
  .describe(
    'Not Found. The requested resource was not found.',
  ) as unknown as ToZod<SendQuestionMessage404>

export type SendQuestionMessage404Schema = SendQuestionMessage404

/**
 * @description Too Many Requests. You have exceeded the rate limit. Try again later.
 */
export const sendQuestionMessage429Schema = z
  .object({
    message: z.string(),
  })
  .describe(
    'Too Many Requests. You have exceeded the rate limit. Try again later.',
  ) as unknown as ToZod<SendQuestionMessage429>

export type SendQuestionMessage429Schema = SendQuestionMessage429

/**
 * @description Internal Server Error. This is a problem with the server that you cannot fix.
 */
export const sendQuestionMessage500Schema = z
  .object({
    code: z.string(),
    message: z.string(),
  })
  .describe(
    'Internal Server Error. This is a problem with the server that you cannot fix.',
  ) as unknown as ToZod<SendQuestionMessage500>

export type SendQuestionMessage500Schema = SendQuestionMessage500

export const sendQuestionMessageMutationRequestSchema = z.object({
  organizationId: z.string().nullable().nullish(),
  organizationSlug: z.string().nullable().nullish(),
  teamId: z.string().nullable().nullish(),
  agentId: z.string().nullable().nullish(),
  parentMessageId: z.string().nullable().nullish(),
  message: z.object({
    parts: z
      .array(
        z.union([
          z.object({
            type: z.enum(['text']),
            text: z.string(),
          }),
          z.object({
            type: z.enum(['file']),
            mediaType: z.string(),
            filename: z.string().optional(),
            url: z.string(),
          }),
        ]),
      )
      .min(1),
  }),
  explorerTree: z
    .object({
      explorerType: z.enum(['private', 'team']),
      folderId: z.string().nullable().nullish(),
    })
    .describe('Used only when conversation is new')
    .optional(),
}) as unknown as ToZod<SendQuestionMessageMutationRequest>

export type SendQuestionMessageMutationRequestSchema =
  SendQuestionMessageMutationRequest

export const sendQuestionMessageMutationResponseSchema = z.lazy(
  () => sendQuestionMessage200Schema,
) as unknown as ToZod<SendQuestionMessageMutationResponse>

export type SendQuestionMessageMutationResponseSchema =
  SendQuestionMessageMutationResponse
