/**
 * Generated by Kubb (https://kubb.dev/).
 * Do not edit manually.
 */

import type {
  GetConnectionPathParams,
  GetConnectionQueryParams,
  GetConnection200,
  GetConnection400,
  GetConnection401,
  GetConnection403,
  GetConnection404,
  GetConnection429,
  GetConnection500,
  GetConnectionQueryResponse,
} from '../types/GetConnection'
import type { ToZod } from '@kubb/plugin-zod/utils'
import { z } from 'zod'

export const getConnectionPathParamsSchema = z.object({
  connectionId: z.string(),
}) as unknown as ToZod<GetConnectionPathParams>

export type GetConnectionPathParamsSchema = GetConnectionPathParams

export const getConnectionQueryParamsSchema = z
  .object({
    organizationId: z.string().optional(),
    organizationSlug: z.string().optional(),
  })
  .optional() as unknown as ToZod<GetConnectionQueryParams>

export type GetConnectionQueryParamsSchema = GetConnectionQueryParams

/**
 * @description Success
 */
export const getConnection200Schema = z
  .object({
    connection: z.object({
      id: z.string(),
      app: z.string(),
      name: z.string(),
      payload: z.object({}).catchall(z.any()).nullable(),
    }),
  })
  .describe('Success') as unknown as ToZod<GetConnection200>

export type GetConnection200Schema = GetConnection200

/**
 * @description Bad Request. Usually due to missing parameters, or invalid parameters.
 */
export const getConnection400Schema = z
  .object({
    code: z.string(),
    message: z.string(),
    errors: z
      .array(
        z
          .object({
            code: z.string(),
            message: z.string(),
            path: z.array(z.union([z.string(), z.number()])),
          })
          .catchall(z.any()),
      )
      .describe('Validation errors')
      .optional(),
  })
  .describe(
    'Bad Request. Usually due to missing parameters, or invalid parameters.',
  ) as unknown as ToZod<GetConnection400>

export type GetConnection400Schema = GetConnection400

/**
 * @description Unauthorized. Due to missing or invalid authentication.
 */
export const getConnection401Schema = z
  .object({
    code: z.string(),
    message: z.string(),
  })
  .describe(
    'Unauthorized. Due to missing or invalid authentication.',
  ) as unknown as ToZod<GetConnection401>

export type GetConnection401Schema = GetConnection401

/**
 * @description Forbidden. You do not have permission to access this resource or to perform this action.
 */
export const getConnection403Schema = z
  .object({
    message: z.string(),
  })
  .describe(
    'Forbidden. You do not have permission to access this resource or to perform this action.',
  ) as unknown as ToZod<GetConnection403>

export type GetConnection403Schema = GetConnection403

/**
 * @description Not Found. The requested resource was not found.
 */
export const getConnection404Schema = z
  .object({
    message: z.string(),
  })
  .describe(
    'Not Found. The requested resource was not found.',
  ) as unknown as ToZod<GetConnection404>

export type GetConnection404Schema = GetConnection404

/**
 * @description Too Many Requests. You have exceeded the rate limit. Try again later.
 */
export const getConnection429Schema = z
  .object({
    message: z.string(),
  })
  .describe(
    'Too Many Requests. You have exceeded the rate limit. Try again later.',
  ) as unknown as ToZod<GetConnection429>

export type GetConnection429Schema = GetConnection429

/**
 * @description Internal Server Error. This is a problem with the server that you cannot fix.
 */
export const getConnection500Schema = z
  .object({
    code: z.string(),
    message: z.string(),
  })
  .describe(
    'Internal Server Error. This is a problem with the server that you cannot fix.',
  ) as unknown as ToZod<GetConnection500>

export type GetConnection500Schema = GetConnection500

export const getConnectionQueryResponseSchema = z.lazy(
  () => getConnection200Schema,
) as unknown as ToZod<GetConnectionQueryResponse>

export type GetConnectionQueryResponseSchema = GetConnectionQueryResponse
