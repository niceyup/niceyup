/**
 * Generated by Kubb (https://kubb.dev/).
 * Do not edit manually.
 */

import type {
  ResendQuestionMessagePathParams,
  ResendQuestionMessage200,
  ResendQuestionMessage400,
  ResendQuestionMessage401,
  ResendQuestionMessage403,
  ResendQuestionMessage404,
  ResendQuestionMessage429,
  ResendQuestionMessage500,
  ResendQuestionMessageMutationRequest,
  ResendQuestionMessageMutationResponse,
} from '../types/ResendQuestionMessage'
import type { ToZod } from '@kubb/plugin-zod/utils'
import { z } from 'zod'

export const resendQuestionMessagePathParamsSchema = z.object({
  conversationId: z.string(),
}) as unknown as ToZod<ResendQuestionMessagePathParams>

export type ResendQuestionMessagePathParamsSchema =
  ResendQuestionMessagePathParams

/**
 * @description Success
 */
export const resendQuestionMessage200Schema = z
  .object({
    questionMessage: z.object({
      id: z.string(),
      status: z.enum(['queued', 'processing', 'finished', 'stopped', 'failed']),
      role: z.enum(['system', 'user', 'assistant']),
      parts: z
        .array(
          z.union([
            z.object({
              type: z.enum(['text']),
              text: z.string(),
              state: z.enum(['streaming', 'done']).optional(),
              providerMetadata: z.object({}).catchall(z.any()).optional(),
            }),
            z.object({
              type: z.enum(['reasoning']),
              text: z.string(),
              state: z.enum(['streaming', 'done']).optional(),
              providerMetadata: z.object({}).catchall(z.any()).optional(),
            }),
            z.object({
              type: z.enum(['source-url']),
              sourceId: z.string(),
              url: z.string(),
              title: z.string().optional(),
              providerMetadata: z.object({}).catchall(z.any()).optional(),
            }),
            z.object({
              type: z.enum(['source-document']),
              sourceId: z.string(),
              mediaType: z.string(),
              title: z.string(),
              filename: z.string().optional(),
              providerMetadata: z.object({}).catchall(z.any()).optional(),
            }),
            z.object({
              type: z.enum(['file']),
              mediaType: z.string(),
              filename: z.string().optional(),
              url: z.string(),
              providerMetadata: z.object({}).catchall(z.any()).optional(),
            }),
            z.object({
              type: z.enum(['step-start']),
            }),
            z.object({
              type: z.string().regex(/^data-.*/),
              id: z.string().optional(),
              data: z.any(),
            }),
            z.object({
              type: z.enum(['dynamic-tool']),
              toolName: z.string(),
              toolCallId: z.string(),
              state: z.enum(['input-streaming']),
              input: z.any().optional(),
              output: z.any().optional(),
              errorText: z.any().optional(),
            }),
            z.object({
              type: z.enum(['dynamic-tool']),
              toolName: z.string(),
              toolCallId: z.string(),
              state: z.enum(['input-available']),
              input: z.any(),
              output: z.any().optional(),
              errorText: z.any().optional(),
              callProviderMetadata: z.object({}).catchall(z.any()).optional(),
            }),
            z.object({
              type: z.enum(['dynamic-tool']),
              toolName: z.string(),
              toolCallId: z.string(),
              state: z.enum(['output-available']),
              input: z.any(),
              output: z.any(),
              errorText: z.any().optional(),
              callProviderMetadata: z.object({}).catchall(z.any()).optional(),
              preliminary: z.boolean().optional(),
            }),
            z.object({
              type: z.enum(['dynamic-tool']),
              toolName: z.string(),
              toolCallId: z.string(),
              state: z.enum(['output-error']),
              input: z.any(),
              output: z.any().optional(),
              errorText: z.string(),
              callProviderMetadata: z.object({}).catchall(z.any()).optional(),
            }),
            z.object({
              type: z.string().regex(/^tool-.*/),
              toolCallId: z.string(),
              state: z.enum(['input-streaming']),
              input: z.any().optional(),
              output: z.any().optional(),
              errorText: z.any().optional(),
            }),
            z.object({
              type: z.string().regex(/^tool-.*/),
              toolCallId: z.string(),
              state: z.enum(['input-available']),
              input: z.any(),
              output: z.any().optional(),
              errorText: z.any().optional(),
              callProviderMetadata: z.object({}).catchall(z.any()).optional(),
            }),
            z.object({
              type: z.string().regex(/^tool-.*/),
              toolCallId: z.string(),
              state: z.enum(['output-available']),
              input: z.any(),
              output: z.any(),
              errorText: z.any().optional(),
              callProviderMetadata: z.object({}).catchall(z.any()).optional(),
              preliminary: z.boolean().optional(),
            }),
            z.object({
              type: z.string().regex(/^tool-.*/),
              toolCallId: z.string(),
              state: z.enum(['output-error']),
              input: z.any(),
              output: z.any().optional(),
              errorText: z.string(),
              callProviderMetadata: z.object({}).catchall(z.any()).optional(),
            }),
          ]),
        )
        .nullable(),
      metadata: z.any(),
      authorId: z.string().nullable().nullish(),
      parentId: z.string().nullable().nullish(),
      children: z.array(z.string()).optional(),
    }),
    answerMessage: z.object({
      id: z.string(),
      status: z.enum(['queued', 'processing', 'finished', 'stopped', 'failed']),
      role: z.enum(['system', 'user', 'assistant']),
      parts: z
        .array(
          z.union([
            z.object({
              type: z.enum(['text']),
              text: z.string(),
              state: z.enum(['streaming', 'done']).optional(),
              providerMetadata: z.object({}).catchall(z.any()).optional(),
            }),
            z.object({
              type: z.enum(['reasoning']),
              text: z.string(),
              state: z.enum(['streaming', 'done']).optional(),
              providerMetadata: z.object({}).catchall(z.any()).optional(),
            }),
            z.object({
              type: z.enum(['source-url']),
              sourceId: z.string(),
              url: z.string(),
              title: z.string().optional(),
              providerMetadata: z.object({}).catchall(z.any()).optional(),
            }),
            z.object({
              type: z.enum(['source-document']),
              sourceId: z.string(),
              mediaType: z.string(),
              title: z.string(),
              filename: z.string().optional(),
              providerMetadata: z.object({}).catchall(z.any()).optional(),
            }),
            z.object({
              type: z.enum(['file']),
              mediaType: z.string(),
              filename: z.string().optional(),
              url: z.string(),
              providerMetadata: z.object({}).catchall(z.any()).optional(),
            }),
            z.object({
              type: z.enum(['step-start']),
            }),
            z.object({
              type: z.string().regex(/^data-.*/),
              id: z.string().optional(),
              data: z.any(),
            }),
            z.object({
              type: z.enum(['dynamic-tool']),
              toolName: z.string(),
              toolCallId: z.string(),
              state: z.enum(['input-streaming']),
              input: z.any().optional(),
              output: z.any().optional(),
              errorText: z.any().optional(),
            }),
            z.object({
              type: z.enum(['dynamic-tool']),
              toolName: z.string(),
              toolCallId: z.string(),
              state: z.enum(['input-available']),
              input: z.any(),
              output: z.any().optional(),
              errorText: z.any().optional(),
              callProviderMetadata: z.object({}).catchall(z.any()).optional(),
            }),
            z.object({
              type: z.enum(['dynamic-tool']),
              toolName: z.string(),
              toolCallId: z.string(),
              state: z.enum(['output-available']),
              input: z.any(),
              output: z.any(),
              errorText: z.any().optional(),
              callProviderMetadata: z.object({}).catchall(z.any()).optional(),
              preliminary: z.boolean().optional(),
            }),
            z.object({
              type: z.enum(['dynamic-tool']),
              toolName: z.string(),
              toolCallId: z.string(),
              state: z.enum(['output-error']),
              input: z.any(),
              output: z.any().optional(),
              errorText: z.string(),
              callProviderMetadata: z.object({}).catchall(z.any()).optional(),
            }),
            z.object({
              type: z.string().regex(/^tool-.*/),
              toolCallId: z.string(),
              state: z.enum(['input-streaming']),
              input: z.any().optional(),
              output: z.any().optional(),
              errorText: z.any().optional(),
            }),
            z.object({
              type: z.string().regex(/^tool-.*/),
              toolCallId: z.string(),
              state: z.enum(['input-available']),
              input: z.any(),
              output: z.any().optional(),
              errorText: z.any().optional(),
              callProviderMetadata: z.object({}).catchall(z.any()).optional(),
            }),
            z.object({
              type: z.string().regex(/^tool-.*/),
              toolCallId: z.string(),
              state: z.enum(['output-available']),
              input: z.any(),
              output: z.any(),
              errorText: z.any().optional(),
              callProviderMetadata: z.object({}).catchall(z.any()).optional(),
              preliminary: z.boolean().optional(),
            }),
            z.object({
              type: z.string().regex(/^tool-.*/),
              toolCallId: z.string(),
              state: z.enum(['output-error']),
              input: z.any(),
              output: z.any().optional(),
              errorText: z.string(),
              callProviderMetadata: z.object({}).catchall(z.any()).optional(),
            }),
          ]),
        )
        .nullable(),
      metadata: z.any(),
      authorId: z.string().nullable().nullish(),
      parentId: z.string().nullable().nullish(),
      children: z.array(z.string()).optional(),
    }),
  })
  .describe('Success') as unknown as ToZod<ResendQuestionMessage200>

export type ResendQuestionMessage200Schema = ResendQuestionMessage200

/**
 * @description Bad Request. Usually due to missing parameters, or invalid parameters.
 */
export const resendQuestionMessage400Schema = z
  .object({
    code: z.string(),
    message: z.string(),
    errors: z
      .array(
        z
          .object({
            code: z.string(),
            message: z.string(),
            path: z.array(z.union([z.string(), z.number()])),
          })
          .catchall(z.any()),
      )
      .describe('Validation errors')
      .optional(),
  })
  .describe(
    'Bad Request. Usually due to missing parameters, or invalid parameters.',
  ) as unknown as ToZod<ResendQuestionMessage400>

export type ResendQuestionMessage400Schema = ResendQuestionMessage400

/**
 * @description Unauthorized. Due to missing or invalid authentication.
 */
export const resendQuestionMessage401Schema = z
  .object({
    code: z.string(),
    message: z.string(),
  })
  .describe(
    'Unauthorized. Due to missing or invalid authentication.',
  ) as unknown as ToZod<ResendQuestionMessage401>

export type ResendQuestionMessage401Schema = ResendQuestionMessage401

/**
 * @description Forbidden. You do not have permission to access this resource or to perform this action.
 */
export const resendQuestionMessage403Schema = z
  .object({
    message: z.string(),
  })
  .describe(
    'Forbidden. You do not have permission to access this resource or to perform this action.',
  ) as unknown as ToZod<ResendQuestionMessage403>

export type ResendQuestionMessage403Schema = ResendQuestionMessage403

/**
 * @description Not Found. The requested resource was not found.
 */
export const resendQuestionMessage404Schema = z
  .object({
    message: z.string(),
  })
  .describe(
    'Not Found. The requested resource was not found.',
  ) as unknown as ToZod<ResendQuestionMessage404>

export type ResendQuestionMessage404Schema = ResendQuestionMessage404

/**
 * @description Too Many Requests. You have exceeded the rate limit. Try again later.
 */
export const resendQuestionMessage429Schema = z
  .object({
    message: z.string(),
  })
  .describe(
    'Too Many Requests. You have exceeded the rate limit. Try again later.',
  ) as unknown as ToZod<ResendQuestionMessage429>

export type ResendQuestionMessage429Schema = ResendQuestionMessage429

/**
 * @description Internal Server Error. This is a problem with the server that you cannot fix.
 */
export const resendQuestionMessage500Schema = z
  .object({
    code: z.string(),
    message: z.string(),
  })
  .describe(
    'Internal Server Error. This is a problem with the server that you cannot fix.',
  ) as unknown as ToZod<ResendQuestionMessage500>

export type ResendQuestionMessage500Schema = ResendQuestionMessage500

export const resendQuestionMessageMutationRequestSchema = z.object({
  organizationId: z.string().nullable().nullish(),
  organizationSlug: z.string().nullable().nullish(),
  teamId: z.string().nullable().nullish(),
  agentId: z.string(),
  parentMessageId: z.string(),
  message: z.object({
    parts: z
      .array(
        z.union([
          z.object({
            type: z.enum(['text']),
            text: z.string(),
          }),
          z.object({
            type: z.enum(['file']),
            mediaType: z.string(),
            filename: z.string().optional(),
            url: z.string(),
          }),
        ]),
      )
      .min(1),
    metadata: z.any().nullish(),
  }),
}) as unknown as ToZod<ResendQuestionMessageMutationRequest>

export type ResendQuestionMessageMutationRequestSchema =
  ResendQuestionMessageMutationRequest

export const resendQuestionMessageMutationResponseSchema = z.lazy(
  () => resendQuestionMessage200Schema,
) as unknown as ToZod<ResendQuestionMessageMutationResponse>

export type ResendQuestionMessageMutationResponseSchema =
  ResendQuestionMessageMutationResponse
