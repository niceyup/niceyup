/**
 * Generated by Kubb (https://kubb.dev/).
 * Do not edit manually.
 */

import type {
  GenerateUploadSignatureHeaderParams,
  GenerateUploadSignature200,
  GenerateUploadSignature400,
  GenerateUploadSignature401,
  GenerateUploadSignature403,
  GenerateUploadSignature404,
  GenerateUploadSignature429,
  GenerateUploadSignature500,
  GenerateUploadSignatureMutationRequest,
  GenerateUploadSignatureMutationResponse,
} from '../types/GenerateUploadSignature'
import type { ToZod } from '@kubb/plugin-zod/utils'
import { z } from 'zod'

export const generateUploadSignatureHeaderParamsSchema = z.object({
  'x-api-key': z.string(),
}) as unknown as ToZod<GenerateUploadSignatureHeaderParams>

export type GenerateUploadSignatureHeaderParamsSchema =
  GenerateUploadSignatureHeaderParams

/**
 * @description Success
 */
export const generateUploadSignature200Schema = z
  .object({
    signature: z.string(),
  })
  .describe('Success') as unknown as ToZod<GenerateUploadSignature200>

export type GenerateUploadSignature200Schema = GenerateUploadSignature200

/**
 * @description Bad Request. Usually due to missing parameters, or invalid parameters.
 */
export const generateUploadSignature400Schema = z
  .object({
    code: z.string(),
    message: z.string(),
    errors: z
      .array(
        z
          .object({
            code: z.string(),
            message: z.string(),
            path: z.array(z.union([z.string(), z.number()])),
          })
          .catchall(z.any()),
      )
      .describe('Validation errors')
      .optional(),
  })
  .describe(
    'Bad Request. Usually due to missing parameters, or invalid parameters.',
  ) as unknown as ToZod<GenerateUploadSignature400>

export type GenerateUploadSignature400Schema = GenerateUploadSignature400

/**
 * @description Unauthorized. Due to missing or invalid authentication.
 */
export const generateUploadSignature401Schema = z
  .object({
    code: z.string(),
    message: z.string(),
  })
  .describe(
    'Unauthorized. Due to missing or invalid authentication.',
  ) as unknown as ToZod<GenerateUploadSignature401>

export type GenerateUploadSignature401Schema = GenerateUploadSignature401

/**
 * @description Forbidden. You do not have permission to access this resource or to perform this action.
 */
export const generateUploadSignature403Schema = z
  .object({
    message: z.string(),
  })
  .describe(
    'Forbidden. You do not have permission to access this resource or to perform this action.',
  ) as unknown as ToZod<GenerateUploadSignature403>

export type GenerateUploadSignature403Schema = GenerateUploadSignature403

/**
 * @description Not Found. The requested resource was not found.
 */
export const generateUploadSignature404Schema = z
  .object({
    message: z.string(),
  })
  .describe(
    'Not Found. The requested resource was not found.',
  ) as unknown as ToZod<GenerateUploadSignature404>

export type GenerateUploadSignature404Schema = GenerateUploadSignature404

/**
 * @description Too Many Requests. You have exceeded the rate limit. Try again later.
 */
export const generateUploadSignature429Schema = z
  .object({
    message: z.string(),
  })
  .describe(
    'Too Many Requests. You have exceeded the rate limit. Try again later.',
  ) as unknown as ToZod<GenerateUploadSignature429>

export type GenerateUploadSignature429Schema = GenerateUploadSignature429

/**
 * @description Internal Server Error. This is a problem with the server that you cannot fix.
 */
export const generateUploadSignature500Schema = z
  .object({
    code: z.string(),
    message: z.string(),
  })
  .describe(
    'Internal Server Error. This is a problem with the server that you cannot fix.',
  ) as unknown as ToZod<GenerateUploadSignature500>

export type GenerateUploadSignature500Schema = GenerateUploadSignature500

export const generateUploadSignatureMutationRequestSchema = z.object({
  organizationId: z.string().nullable().nullish(),
  organizationSlug: z.string().nullable().nullish(),
  teamId: z.string().nullable().nullish(),
  bucket: z.enum(['default', 'engine']).default('default'),
  scope: z.enum(['public', 'conversations', 'sources']),
  metadata: z
    .object({
      conversationId: z.string().nullable().nullish(),
      sourceId: z.string().optional(),
    })
    .optional(),
  accept: z.string().default('*'),
  expires: z.number().min(0).default(300),
}) as unknown as ToZod<GenerateUploadSignatureMutationRequest>

export type GenerateUploadSignatureMutationRequestSchema =
  GenerateUploadSignatureMutationRequest

export const generateUploadSignatureMutationResponseSchema = z.lazy(
  () => generateUploadSignature200Schema,
) as unknown as ToZod<GenerateUploadSignatureMutationResponse>

export type GenerateUploadSignatureMutationResponseSchema =
  GenerateUploadSignatureMutationResponse
