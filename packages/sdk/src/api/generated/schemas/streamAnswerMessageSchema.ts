/**
 * Generated by Kubb (https://kubb.dev/).
 * Do not edit manually.
 */

import type {
  StreamAnswerMessagePathParams,
  StreamAnswerMessageQueryParams,
  StreamAnswerMessage200,
  StreamAnswerMessage400,
  StreamAnswerMessage401,
  StreamAnswerMessage403,
  StreamAnswerMessage404,
  StreamAnswerMessage429,
  StreamAnswerMessage500,
  StreamAnswerMessageQueryResponse,
} from '../types/StreamAnswerMessage'
import type { ToZod } from '@kubb/plugin-zod/utils'
import { z } from 'zod'

export const streamAnswerMessagePathParamsSchema = z.object({
  conversationId: z.string(),
  messageId: z.string(),
}) as unknown as ToZod<StreamAnswerMessagePathParams>

export type StreamAnswerMessagePathParamsSchema = StreamAnswerMessagePathParams

export const streamAnswerMessageQueryParamsSchema = z
  .object({
    organizationId: z.string().optional(),
    organizationSlug: z.string().optional(),
    teamId: z.string().optional(),
  })
  .optional() as unknown as ToZod<StreamAnswerMessageQueryParams>

export type StreamAnswerMessageQueryParamsSchema =
  StreamAnswerMessageQueryParams

/**
 * @description Success
 */
export const streamAnswerMessage200Schema =
  z.any() as unknown as ToZod<StreamAnswerMessage200>

export type StreamAnswerMessage200Schema = StreamAnswerMessage200

/**
 * @description Bad Request. Usually due to missing parameters, or invalid parameters.
 */
export const streamAnswerMessage400Schema = z
  .object({
    code: z.string(),
    message: z.string(),
    errors: z
      .array(
        z
          .object({
            code: z.string(),
            message: z.string(),
            path: z.array(z.union([z.string(), z.number()])),
          })
          .catchall(z.any()),
      )
      .describe('Validation errors')
      .optional(),
  })
  .describe(
    'Bad Request. Usually due to missing parameters, or invalid parameters.',
  ) as unknown as ToZod<StreamAnswerMessage400>

export type StreamAnswerMessage400Schema = StreamAnswerMessage400

/**
 * @description Unauthorized. Due to missing or invalid authentication.
 */
export const streamAnswerMessage401Schema = z
  .object({
    code: z.string(),
    message: z.string(),
  })
  .describe(
    'Unauthorized. Due to missing or invalid authentication.',
  ) as unknown as ToZod<StreamAnswerMessage401>

export type StreamAnswerMessage401Schema = StreamAnswerMessage401

/**
 * @description Forbidden. You do not have permission to access this resource or to perform this action.
 */
export const streamAnswerMessage403Schema = z
  .object({
    message: z.string(),
  })
  .describe(
    'Forbidden. You do not have permission to access this resource or to perform this action.',
  ) as unknown as ToZod<StreamAnswerMessage403>

export type StreamAnswerMessage403Schema = StreamAnswerMessage403

/**
 * @description Not Found. The requested resource was not found.
 */
export const streamAnswerMessage404Schema = z
  .object({
    message: z.string(),
  })
  .describe(
    'Not Found. The requested resource was not found.',
  ) as unknown as ToZod<StreamAnswerMessage404>

export type StreamAnswerMessage404Schema = StreamAnswerMessage404

/**
 * @description Too Many Requests. You have exceeded the rate limit. Try again later.
 */
export const streamAnswerMessage429Schema = z
  .object({
    message: z.string(),
  })
  .describe(
    'Too Many Requests. You have exceeded the rate limit. Try again later.',
  ) as unknown as ToZod<StreamAnswerMessage429>

export type StreamAnswerMessage429Schema = StreamAnswerMessage429

/**
 * @description Internal Server Error. This is a problem with the server that you cannot fix.
 */
export const streamAnswerMessage500Schema = z
  .object({
    code: z.string(),
    message: z.string(),
  })
  .describe(
    'Internal Server Error. This is a problem with the server that you cannot fix.',
  ) as unknown as ToZod<StreamAnswerMessage500>

export type StreamAnswerMessage500Schema = StreamAnswerMessage500

export const streamAnswerMessageQueryResponseSchema = z.lazy(
  () => streamAnswerMessage200Schema,
) as unknown as ToZod<StreamAnswerMessageQueryResponse>

export type StreamAnswerMessageQueryResponseSchema =
  StreamAnswerMessageQueryResponse
