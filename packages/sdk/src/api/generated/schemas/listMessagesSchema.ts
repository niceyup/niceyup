/**
 * Generated by Kubb (https://kubb.dev/).
 * Do not edit manually.
 */

import type {
  ListMessagesPathParams,
  ListMessagesQueryParams,
  ListMessages200,
  ListMessages400,
  ListMessages401,
  ListMessages403,
  ListMessages404,
  ListMessages429,
  ListMessages500,
  ListMessagesQueryResponse,
} from '../types/ListMessages'
import type { ToZod } from '@kubb/plugin-zod/utils'
import { z } from 'zod'

export const listMessagesPathParamsSchema = z.object({
  conversationId: z.string(),
}) as unknown as ToZod<ListMessagesPathParams>

export type ListMessagesPathParamsSchema = ListMessagesPathParams

export const listMessagesQueryParamsSchema = z.object({
  organizationId: z.string().optional(),
  organizationSlug: z.string().optional(),
  teamId: z.string().optional(),
  agentId: z.string(),
  targetMessageId: z.string().optional(),
  parentNodes: z.boolean().optional(),
}) as unknown as ToZod<ListMessagesQueryParams>

export type ListMessagesQueryParamsSchema = ListMessagesQueryParams

/**
 * @description Success
 */
export const listMessages200Schema = z
  .object({
    messages: z.array(
      z.object({
        id: z.string(),
        status: z.enum([
          'queued',
          'processing',
          'finished',
          'stopped',
          'failed',
        ]),
        role: z.enum(['system', 'user', 'assistant']),
        parts: z
          .array(
            z.union([
              z.object({
                type: z.enum(['text']),
                text: z.string(),
                state: z.enum(['streaming', 'done']).optional(),
                providerMetadata: z.object({}).catchall(z.any()).optional(),
              }),
              z.object({
                type: z.enum(['reasoning']),
                text: z.string(),
                state: z.enum(['streaming', 'done']).optional(),
                providerMetadata: z.object({}).catchall(z.any()).optional(),
              }),
              z.object({
                type: z.enum(['source-url']),
                sourceId: z.string(),
                url: z.string(),
                title: z.string().optional(),
                providerMetadata: z.object({}).catchall(z.any()).optional(),
              }),
              z.object({
                type: z.enum(['source-document']),
                sourceId: z.string(),
                mediaType: z.string(),
                title: z.string(),
                filename: z.string().optional(),
                providerMetadata: z.object({}).catchall(z.any()).optional(),
              }),
              z.object({
                type: z.enum(['file']),
                mediaType: z.string(),
                filename: z.string().optional(),
                url: z.string(),
                providerMetadata: z.object({}).catchall(z.any()).optional(),
              }),
              z.object({
                type: z.enum(['step-start']),
              }),
              z.object({
                type: z.string().regex(/^data-.*/),
                id: z.string().optional(),
                data: z.any(),
              }),
              z.object({
                type: z.enum(['dynamic-tool']),
                toolName: z.string(),
                toolCallId: z.string(),
                state: z.enum(['input-streaming']),
                input: z.any().optional(),
                output: z.any().optional(),
                errorText: z.any().optional(),
              }),
              z.object({
                type: z.enum(['dynamic-tool']),
                toolName: z.string(),
                toolCallId: z.string(),
                state: z.enum(['input-available']),
                input: z.any(),
                output: z.any().optional(),
                errorText: z.any().optional(),
                callProviderMetadata: z.object({}).catchall(z.any()).optional(),
              }),
              z.object({
                type: z.enum(['dynamic-tool']),
                toolName: z.string(),
                toolCallId: z.string(),
                state: z.enum(['output-available']),
                input: z.any(),
                output: z.any(),
                errorText: z.any().optional(),
                callProviderMetadata: z.object({}).catchall(z.any()).optional(),
                preliminary: z.boolean().optional(),
              }),
              z.object({
                type: z.enum(['dynamic-tool']),
                toolName: z.string(),
                toolCallId: z.string(),
                state: z.enum(['output-error']),
                input: z.any(),
                output: z.any().optional(),
                errorText: z.string(),
                callProviderMetadata: z.object({}).catchall(z.any()).optional(),
              }),
              z.object({
                type: z.string().regex(/^tool-.*/),
                toolCallId: z.string(),
                state: z.enum(['input-streaming']),
                input: z.any().optional(),
                output: z.any().optional(),
                errorText: z.any().optional(),
              }),
              z.object({
                type: z.string().regex(/^tool-.*/),
                toolCallId: z.string(),
                state: z.enum(['input-available']),
                input: z.any(),
                output: z.any().optional(),
                errorText: z.any().optional(),
                callProviderMetadata: z.object({}).catchall(z.any()).optional(),
              }),
              z.object({
                type: z.string().regex(/^tool-.*/),
                toolCallId: z.string(),
                state: z.enum(['output-available']),
                input: z.any(),
                output: z.any(),
                errorText: z.any().optional(),
                callProviderMetadata: z.object({}).catchall(z.any()).optional(),
                preliminary: z.boolean().optional(),
              }),
              z.object({
                type: z.string().regex(/^tool-.*/),
                toolCallId: z.string(),
                state: z.enum(['output-error']),
                input: z.any(),
                output: z.any().optional(),
                errorText: z.string(),
                callProviderMetadata: z.object({}).catchall(z.any()).optional(),
              }),
            ]),
          )
          .nullable(),
        metadata: z.any(),
        authorId: z.string().nullable().nullish(),
        parentId: z.string().nullable().nullish(),
        children: z.array(z.string()).optional(),
      }),
    ),
  })
  .describe('Success') as unknown as ToZod<ListMessages200>

export type ListMessages200Schema = ListMessages200

/**
 * @description Bad Request. Usually due to missing parameters, or invalid parameters.
 */
export const listMessages400Schema = z
  .object({
    code: z.string(),
    message: z.string(),
    errors: z
      .array(
        z
          .object({
            code: z.string(),
            message: z.string(),
            path: z.array(z.union([z.string(), z.number()])),
          })
          .catchall(z.any()),
      )
      .describe('Validation errors')
      .optional(),
  })
  .describe(
    'Bad Request. Usually due to missing parameters, or invalid parameters.',
  ) as unknown as ToZod<ListMessages400>

export type ListMessages400Schema = ListMessages400

/**
 * @description Unauthorized. Due to missing or invalid authentication.
 */
export const listMessages401Schema = z
  .object({
    code: z.string(),
    message: z.string(),
  })
  .describe(
    'Unauthorized. Due to missing or invalid authentication.',
  ) as unknown as ToZod<ListMessages401>

export type ListMessages401Schema = ListMessages401

/**
 * @description Forbidden. You do not have permission to access this resource or to perform this action.
 */
export const listMessages403Schema = z
  .object({
    message: z.string(),
  })
  .describe(
    'Forbidden. You do not have permission to access this resource or to perform this action.',
  ) as unknown as ToZod<ListMessages403>

export type ListMessages403Schema = ListMessages403

/**
 * @description Not Found. The requested resource was not found.
 */
export const listMessages404Schema = z
  .object({
    message: z.string(),
  })
  .describe(
    'Not Found. The requested resource was not found.',
  ) as unknown as ToZod<ListMessages404>

export type ListMessages404Schema = ListMessages404

/**
 * @description Too Many Requests. You have exceeded the rate limit. Try again later.
 */
export const listMessages429Schema = z
  .object({
    message: z.string(),
  })
  .describe(
    'Too Many Requests. You have exceeded the rate limit. Try again later.',
  ) as unknown as ToZod<ListMessages429>

export type ListMessages429Schema = ListMessages429

/**
 * @description Internal Server Error. This is a problem with the server that you cannot fix.
 */
export const listMessages500Schema = z
  .object({
    code: z.string(),
    message: z.string(),
  })
  .describe(
    'Internal Server Error. This is a problem with the server that you cannot fix.',
  ) as unknown as ToZod<ListMessages500>

export type ListMessages500Schema = ListMessages500

export const listMessagesQueryResponseSchema = z.lazy(
  () => listMessages200Schema,
) as unknown as ToZod<ListMessagesQueryResponse>

export type ListMessagesQueryResponseSchema = ListMessagesQueryResponse
