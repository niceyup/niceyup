/**
 * Generated by Kubb (https://kubb.dev/).
 * Do not edit manually.
 */

import fetch from '../../../../client/fetch-react-query'
import type {
  RequestConfig,
  ResponseErrorConfig,
} from '../../../../client/fetch-react-query'
import type {
  RegenerateAnswerMessageMutationRequest,
  RegenerateAnswerMessageMutationResponse,
  RegenerateAnswerMessagePathParams,
  RegenerateAnswerMessage400,
  RegenerateAnswerMessage401,
  RegenerateAnswerMessage403,
  RegenerateAnswerMessage404,
  RegenerateAnswerMessage429,
  RegenerateAnswerMessage500,
} from '../../types/RegenerateAnswerMessage'

function getRegenerateAnswerMessageUrl({
  conversationId,
}: { conversationId: RegenerateAnswerMessagePathParams['conversationId'] }) {
  return `/conversations/${conversationId}/messages/regenerate-answer` as const
}

/**
 * @description Regenerate an answer message to a conversation
 * {@link /conversations/:conversationId/messages/regenerate-answer}
 */
export async function regenerateAnswerMessage(
  {
    conversationId,
    data,
  }: {
    conversationId: RegenerateAnswerMessagePathParams['conversationId']
    data: RegenerateAnswerMessageMutationRequest
  },
  config: Partial<RequestConfig<RegenerateAnswerMessageMutationRequest>> & {
    client?: typeof fetch
  } = {},
) {
  const { client: request = fetch, ...requestConfig } = config

  const requestData = data
  const res = await request<
    RegenerateAnswerMessageMutationResponse,
    ResponseErrorConfig<
      | RegenerateAnswerMessage400
      | RegenerateAnswerMessage401
      | RegenerateAnswerMessage403
      | RegenerateAnswerMessage404
      | RegenerateAnswerMessage429
      | RegenerateAnswerMessage500
    >,
    RegenerateAnswerMessageMutationRequest
  >({
    method: 'POST',
    url: getRegenerateAnswerMessageUrl({ conversationId }).toString(),
    data: requestData,
    ...requestConfig,
  })
  return res.data
}
