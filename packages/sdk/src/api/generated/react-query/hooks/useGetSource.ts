/**
 * Generated by Kubb (https://kubb.dev/).
 * Do not edit manually.
 */

import fetch from '../../../../client/fetch-react-query'
import type {
  RequestConfig,
  ResponseErrorConfig,
} from '../../../../client/fetch-react-query'
import type {
  GetSourceQueryResponse,
  GetSourcePathParams,
  GetSourceQueryParams,
  GetSource400,
  GetSource401,
  GetSource403,
  GetSource404,
  GetSource429,
  GetSource500,
} from '../../types/GetSource'
import type {
  QueryKey,
  QueryClient,
  QueryObserverOptions,
  UseQueryResult,
} from '@tanstack/react-query'
import { getSource } from '../operations/getSource'
import { queryOptions, useQuery } from '@tanstack/react-query'

export const getSourceQueryKey = (
  { sourceId }: { sourceId: GetSourcePathParams['sourceId'] },
  params?: GetSourceQueryParams,
) =>
  [
    { url: '/sources/:sourceId', params: { sourceId: sourceId } },
    ...(params ? [params] : []),
  ] as const

export type GetSourceQueryKey = ReturnType<typeof getSourceQueryKey>

export function getSourceQueryOptions(
  {
    sourceId,
    params,
  }: {
    sourceId: GetSourcePathParams['sourceId']
    params?: GetSourceQueryParams
  },
  config: Partial<RequestConfig> & { client?: typeof fetch } = {},
) {
  const queryKey = getSourceQueryKey({ sourceId }, params)
  return queryOptions<
    GetSourceQueryResponse,
    ResponseErrorConfig<
      | GetSource400
      | GetSource401
      | GetSource403
      | GetSource404
      | GetSource429
      | GetSource500
    >,
    GetSourceQueryResponse,
    typeof queryKey
  >({
    enabled: !!sourceId,
    queryKey,
    queryFn: async ({ signal }) => {
      config.signal = signal
      return getSource({ sourceId, params }, config)
    },
  })
}

/**
 * @description Get source details
 * {@link /sources/:sourceId}
 */
export function useGetSource<
  TData = GetSourceQueryResponse,
  TQueryData = GetSourceQueryResponse,
  TQueryKey extends QueryKey = GetSourceQueryKey,
>(
  {
    sourceId,
    params,
  }: {
    sourceId: GetSourcePathParams['sourceId']
    params?: GetSourceQueryParams
  },
  options: {
    query?: Partial<
      QueryObserverOptions<
        GetSourceQueryResponse,
        ResponseErrorConfig<
          | GetSource400
          | GetSource401
          | GetSource403
          | GetSource404
          | GetSource429
          | GetSource500
        >,
        TData,
        TQueryData,
        TQueryKey
      >
    > & { client?: QueryClient }
    client?: Partial<RequestConfig> & { client?: typeof fetch }
  } = {},
) {
  const {
    query: { client: queryClient, ...queryOptions } = {},
    client: config = {},
  } = options ?? {}
  const queryKey =
    queryOptions?.queryKey ?? getSourceQueryKey({ sourceId }, params)

  const query = useQuery(
    {
      ...getSourceQueryOptions({ sourceId, params }, config),
      queryKey,
      ...queryOptions,
    } as unknown as QueryObserverOptions,
    queryClient,
  ) as UseQueryResult<
    TData,
    ResponseErrorConfig<
      | GetSource400
      | GetSource401
      | GetSource403
      | GetSource404
      | GetSource429
      | GetSource500
    >
  > & {
    queryKey: TQueryKey
  }

  query.queryKey = queryKey as TQueryKey

  return query
}
