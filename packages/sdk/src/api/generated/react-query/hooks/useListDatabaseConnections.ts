/**
 * Generated by Kubb (https://kubb.dev/).
 * Do not edit manually.
 */

import fetch from '../../../../client/fetch-react-query'
import type {
  RequestConfig,
  ResponseErrorConfig,
} from '../../../../client/fetch-react-query'
import type {
  ListDatabaseConnectionsQueryResponse,
  ListDatabaseConnectionsQueryParams,
  ListDatabaseConnections400,
  ListDatabaseConnections401,
  ListDatabaseConnections403,
  ListDatabaseConnections404,
  ListDatabaseConnections429,
  ListDatabaseConnections500,
} from '../../types/ListDatabaseConnections'
import type {
  QueryKey,
  QueryClient,
  QueryObserverOptions,
  UseQueryResult,
} from '@tanstack/react-query'
import { listDatabaseConnections } from '../operations/listDatabaseConnections'
import { queryOptions, useQuery } from '@tanstack/react-query'

export const listDatabaseConnectionsQueryKey = (
  params?: ListDatabaseConnectionsQueryParams,
) => [{ url: '/database-connections' }, ...(params ? [params] : [])] as const

export type ListDatabaseConnectionsQueryKey = ReturnType<
  typeof listDatabaseConnectionsQueryKey
>

export function listDatabaseConnectionsQueryOptions(
  { params }: { params?: ListDatabaseConnectionsQueryParams },
  config: Partial<RequestConfig> & { client?: typeof fetch } = {},
) {
  const queryKey = listDatabaseConnectionsQueryKey(params)
  return queryOptions<
    ListDatabaseConnectionsQueryResponse,
    ResponseErrorConfig<
      | ListDatabaseConnections400
      | ListDatabaseConnections401
      | ListDatabaseConnections403
      | ListDatabaseConnections404
      | ListDatabaseConnections429
      | ListDatabaseConnections500
    >,
    ListDatabaseConnectionsQueryResponse,
    typeof queryKey
  >({
    queryKey,
    queryFn: async ({ signal }) => {
      config.signal = signal
      return listDatabaseConnections({ params }, config)
    },
  })
}

/**
 * @description Get all database connections
 * {@link /database-connections}
 */
export function useListDatabaseConnections<
  TData = ListDatabaseConnectionsQueryResponse,
  TQueryData = ListDatabaseConnectionsQueryResponse,
  TQueryKey extends QueryKey = ListDatabaseConnectionsQueryKey,
>(
  { params }: { params?: ListDatabaseConnectionsQueryParams },
  options: {
    query?: Partial<
      QueryObserverOptions<
        ListDatabaseConnectionsQueryResponse,
        ResponseErrorConfig<
          | ListDatabaseConnections400
          | ListDatabaseConnections401
          | ListDatabaseConnections403
          | ListDatabaseConnections404
          | ListDatabaseConnections429
          | ListDatabaseConnections500
        >,
        TData,
        TQueryData,
        TQueryKey
      >
    > & { client?: QueryClient }
    client?: Partial<RequestConfig> & { client?: typeof fetch }
  } = {},
) {
  const {
    query: { client: queryClient, ...queryOptions } = {},
    client: config = {},
  } = options ?? {}
  const queryKey =
    queryOptions?.queryKey ?? listDatabaseConnectionsQueryKey(params)

  const query = useQuery(
    {
      ...listDatabaseConnectionsQueryOptions({ params }, config),
      queryKey,
      ...queryOptions,
    } as unknown as QueryObserverOptions,
    queryClient,
  ) as UseQueryResult<
    TData,
    ResponseErrorConfig<
      | ListDatabaseConnections400
      | ListDatabaseConnections401
      | ListDatabaseConnections403
      | ListDatabaseConnections404
      | ListDatabaseConnections429
      | ListDatabaseConnections500
    >
  > & { queryKey: TQueryKey }

  query.queryKey = queryKey as TQueryKey

  return query
}
