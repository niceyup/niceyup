/**
 * Generated by Kubb (https://kubb.dev/).
 * Do not edit manually.
 */

import fetch from '../../../../client/fetch-react-query'
import type {
  RequestConfig,
  ResponseErrorConfig,
} from '../../../../client/fetch-react-query'
import type {
  UploadFileMutationResponse,
  UploadFileHeaderParams,
  UploadFile400,
  UploadFile401,
  UploadFile403,
  UploadFile404,
  UploadFile429,
  UploadFile500,
} from '../../types/UploadFile'
import type { UseMutationOptions, QueryClient } from '@tanstack/react-query'
import { uploadFile } from '../operations/uploadFile'
import { useMutation } from '@tanstack/react-query'

export const uploadFileMutationKey = () => [{ url: '/files' }] as const

export type UploadFileMutationKey = ReturnType<typeof uploadFileMutationKey>

/**
 * @description Upload File
 * {@link /files}
 */
export function useUploadFile<TContext>(
  options: {
    mutation?: UseMutationOptions<
      UploadFileMutationResponse,
      ResponseErrorConfig<
        | UploadFile400
        | UploadFile401
        | UploadFile403
        | UploadFile404
        | UploadFile429
        | UploadFile500
      >,
      { headers: UploadFileHeaderParams },
      TContext
    > & { client?: QueryClient }
    client?: Partial<RequestConfig> & { client?: typeof fetch }
  } = {},
) {
  const { mutation = {}, client: config = {} } = options ?? {}
  const { client: queryClient, ...mutationOptions } = mutation
  const mutationKey = mutationOptions.mutationKey ?? uploadFileMutationKey()

  return useMutation<
    UploadFileMutationResponse,
    ResponseErrorConfig<
      | UploadFile400
      | UploadFile401
      | UploadFile403
      | UploadFile404
      | UploadFile429
      | UploadFile500
    >,
    { headers: UploadFileHeaderParams },
    TContext
  >(
    {
      mutationFn: async ({ headers }) => {
        return uploadFile({ headers }, config)
      },
      mutationKey,
      ...mutationOptions,
    },
    queryClient,
  )
}
