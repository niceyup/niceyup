/**
 * Generated by Kubb (https://kubb.dev/).
 * Do not edit manually.
 */

import fetch from '../../../../client/fetch-react-query'
import type {
  RequestConfig,
  ResponseErrorConfig,
} from '../../../../client/fetch-react-query'
import type {
  GetConnectionQueryResponse,
  GetConnectionPathParams,
  GetConnectionQueryParams,
  GetConnection400,
  GetConnection401,
  GetConnection403,
  GetConnection404,
  GetConnection429,
  GetConnection500,
} from '../../types/GetConnection'
import type {
  QueryKey,
  QueryClient,
  QueryObserverOptions,
  UseQueryResult,
} from '@tanstack/react-query'
import { getConnection } from '../operations/getConnection'
import { queryOptions, useQuery } from '@tanstack/react-query'

export const getConnectionQueryKey = (
  { connectionId }: { connectionId: GetConnectionPathParams['connectionId'] },
  params?: GetConnectionQueryParams,
) =>
  [
    {
      url: '/connections/:connectionId',
      params: { connectionId: connectionId },
    },
    ...(params ? [params] : []),
  ] as const

export type GetConnectionQueryKey = ReturnType<typeof getConnectionQueryKey>

export function getConnectionQueryOptions(
  {
    connectionId,
    params,
  }: {
    connectionId: GetConnectionPathParams['connectionId']
    params?: GetConnectionQueryParams
  },
  config: Partial<RequestConfig> & { client?: typeof fetch } = {},
) {
  const queryKey = getConnectionQueryKey({ connectionId }, params)
  return queryOptions<
    GetConnectionQueryResponse,
    ResponseErrorConfig<
      | GetConnection400
      | GetConnection401
      | GetConnection403
      | GetConnection404
      | GetConnection429
      | GetConnection500
    >,
    GetConnectionQueryResponse,
    typeof queryKey
  >({
    enabled: !!connectionId,
    queryKey,
    queryFn: async ({ signal }) => {
      config.signal = signal
      return getConnection({ connectionId, params }, config)
    },
  })
}

/**
 * @description Get connection details
 * {@link /connections/:connectionId}
 */
export function useGetConnection<
  TData = GetConnectionQueryResponse,
  TQueryData = GetConnectionQueryResponse,
  TQueryKey extends QueryKey = GetConnectionQueryKey,
>(
  {
    connectionId,
    params,
  }: {
    connectionId: GetConnectionPathParams['connectionId']
    params?: GetConnectionQueryParams
  },
  options: {
    query?: Partial<
      QueryObserverOptions<
        GetConnectionQueryResponse,
        ResponseErrorConfig<
          | GetConnection400
          | GetConnection401
          | GetConnection403
          | GetConnection404
          | GetConnection429
          | GetConnection500
        >,
        TData,
        TQueryData,
        TQueryKey
      >
    > & { client?: QueryClient }
    client?: Partial<RequestConfig> & { client?: typeof fetch }
  } = {},
) {
  const {
    query: { client: queryClient, ...queryOptions } = {},
    client: config = {},
  } = options ?? {}
  const queryKey =
    queryOptions?.queryKey ?? getConnectionQueryKey({ connectionId }, params)

  const query = useQuery(
    {
      ...getConnectionQueryOptions({ connectionId, params }, config),
      queryKey,
      ...queryOptions,
    } as unknown as QueryObserverOptions,
    queryClient,
  ) as UseQueryResult<
    TData,
    ResponseErrorConfig<
      | GetConnection400
      | GetConnection401
      | GetConnection403
      | GetConnection404
      | GetConnection429
      | GetConnection500
    >
  > & { queryKey: TQueryKey }

  query.queryKey = queryKey as TQueryKey

  return query
}
