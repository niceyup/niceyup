/**
 * Generated by Kubb (https://kubb.dev/).
 * Do not edit manually.
 */

import fetch from '../../../../client/fetch-react-query'
import type {
  RequestConfig,
  ResponseErrorConfig,
} from '../../../../client/fetch-react-query'
import type {
  GetDatabaseConnectionQueryResponse,
  GetDatabaseConnectionPathParams,
  GetDatabaseConnectionQueryParams,
  GetDatabaseConnection400,
  GetDatabaseConnection401,
  GetDatabaseConnection403,
  GetDatabaseConnection404,
  GetDatabaseConnection429,
  GetDatabaseConnection500,
} from '../../types/GetDatabaseConnection'
import type {
  QueryKey,
  QueryClient,
  QueryObserverOptions,
  UseQueryResult,
} from '@tanstack/react-query'
import { getDatabaseConnection } from '../operations/getDatabaseConnection'
import { queryOptions, useQuery } from '@tanstack/react-query'

export const getDatabaseConnectionQueryKey = (
  {
    databaseConnectionId,
  }: {
    databaseConnectionId: GetDatabaseConnectionPathParams['databaseConnectionId']
  },
  params?: GetDatabaseConnectionQueryParams,
) =>
  [
    {
      url: '/database-connections/:databaseConnectionId',
      params: { databaseConnectionId: databaseConnectionId },
    },
    ...(params ? [params] : []),
  ] as const

export type GetDatabaseConnectionQueryKey = ReturnType<
  typeof getDatabaseConnectionQueryKey
>

export function getDatabaseConnectionQueryOptions(
  {
    databaseConnectionId,
    params,
  }: {
    databaseConnectionId: GetDatabaseConnectionPathParams['databaseConnectionId']
    params?: GetDatabaseConnectionQueryParams
  },
  config: Partial<RequestConfig> & { client?: typeof fetch } = {},
) {
  const queryKey = getDatabaseConnectionQueryKey(
    { databaseConnectionId },
    params,
  )
  return queryOptions<
    GetDatabaseConnectionQueryResponse,
    ResponseErrorConfig<
      | GetDatabaseConnection400
      | GetDatabaseConnection401
      | GetDatabaseConnection403
      | GetDatabaseConnection404
      | GetDatabaseConnection429
      | GetDatabaseConnection500
    >,
    GetDatabaseConnectionQueryResponse,
    typeof queryKey
  >({
    enabled: !!databaseConnectionId,
    queryKey,
    queryFn: async ({ signal }) => {
      config.signal = signal
      return getDatabaseConnection({ databaseConnectionId, params }, config)
    },
  })
}

/**
 * @description Get database connection details
 * {@link /database-connections/:databaseConnectionId}
 */
export function useGetDatabaseConnection<
  TData = GetDatabaseConnectionQueryResponse,
  TQueryData = GetDatabaseConnectionQueryResponse,
  TQueryKey extends QueryKey = GetDatabaseConnectionQueryKey,
>(
  {
    databaseConnectionId,
    params,
  }: {
    databaseConnectionId: GetDatabaseConnectionPathParams['databaseConnectionId']
    params?: GetDatabaseConnectionQueryParams
  },
  options: {
    query?: Partial<
      QueryObserverOptions<
        GetDatabaseConnectionQueryResponse,
        ResponseErrorConfig<
          | GetDatabaseConnection400
          | GetDatabaseConnection401
          | GetDatabaseConnection403
          | GetDatabaseConnection404
          | GetDatabaseConnection429
          | GetDatabaseConnection500
        >,
        TData,
        TQueryData,
        TQueryKey
      >
    > & { client?: QueryClient }
    client?: Partial<RequestConfig> & { client?: typeof fetch }
  } = {},
) {
  const {
    query: { client: queryClient, ...queryOptions } = {},
    client: config = {},
  } = options ?? {}
  const queryKey =
    queryOptions?.queryKey ??
    getDatabaseConnectionQueryKey({ databaseConnectionId }, params)

  const query = useQuery(
    {
      ...getDatabaseConnectionQueryOptions(
        { databaseConnectionId, params },
        config,
      ),
      queryKey,
      ...queryOptions,
    } as unknown as QueryObserverOptions,
    queryClient,
  ) as UseQueryResult<
    TData,
    ResponseErrorConfig<
      | GetDatabaseConnection400
      | GetDatabaseConnection401
      | GetDatabaseConnection403
      | GetDatabaseConnection404
      | GetDatabaseConnection429
      | GetDatabaseConnection500
    >
  > & { queryKey: TQueryKey }

  query.queryKey = queryKey as TQueryKey

  return query
}
