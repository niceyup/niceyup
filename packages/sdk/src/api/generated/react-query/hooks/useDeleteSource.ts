/**
 * Generated by Kubb (https://kubb.dev/).
 * Do not edit manually.
 */

import fetch from '../../../../client/fetch-react-query'
import type {
  RequestConfig,
  ResponseErrorConfig,
} from '../../../../client/fetch-react-query'
import type {
  DeleteSourceMutationRequest,
  DeleteSourceMutationResponse,
  DeleteSourcePathParams,
  DeleteSource400,
  DeleteSource401,
  DeleteSource403,
  DeleteSource404,
  DeleteSource429,
  DeleteSource500,
} from '../../types/DeleteSource'
import type { UseMutationOptions, QueryClient } from '@tanstack/react-query'
import { deleteSource } from '../operations/deleteSource'
import { useMutation } from '@tanstack/react-query'

export const deleteSourceMutationKey = () =>
  [{ url: '/sources/{sourceId}' }] as const

export type DeleteSourceMutationKey = ReturnType<typeof deleteSourceMutationKey>

/**
 * @description Delete a source
 * {@link /sources/:sourceId}
 */
export function useDeleteSource<TContext>(
  options: {
    mutation?: UseMutationOptions<
      DeleteSourceMutationResponse,
      ResponseErrorConfig<
        | DeleteSource400
        | DeleteSource401
        | DeleteSource403
        | DeleteSource404
        | DeleteSource429
        | DeleteSource500
      >,
      {
        sourceId: DeleteSourcePathParams['sourceId']
        data?: DeleteSourceMutationRequest
      },
      TContext
    > & { client?: QueryClient }
    client?: Partial<RequestConfig<DeleteSourceMutationRequest>> & {
      client?: typeof fetch
    }
  } = {},
) {
  const { mutation = {}, client: config = {} } = options ?? {}
  const { client: queryClient, ...mutationOptions } = mutation
  const mutationKey = mutationOptions.mutationKey ?? deleteSourceMutationKey()

  return useMutation<
    DeleteSourceMutationResponse,
    ResponseErrorConfig<
      | DeleteSource400
      | DeleteSource401
      | DeleteSource403
      | DeleteSource404
      | DeleteSource429
      | DeleteSource500
    >,
    {
      sourceId: DeleteSourcePathParams['sourceId']
      data?: DeleteSourceMutationRequest
    },
    TContext
  >(
    {
      mutationFn: async ({ sourceId, data }) => {
        return deleteSource({ sourceId, data }, config)
      },
      mutationKey,
      ...mutationOptions,
    },
    queryClient,
  )
}
