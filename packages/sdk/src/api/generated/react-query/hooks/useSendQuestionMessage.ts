/**
 * Generated by Kubb (https://kubb.dev/).
 * Do not edit manually.
 */

import fetch from '../../../../client/fetch-react-query'
import type {
  RequestConfig,
  ResponseErrorConfig,
} from '../../../../client/fetch-react-query'
import type {
  SendQuestionMessageMutationRequest,
  SendQuestionMessageMutationResponse,
  SendQuestionMessagePathParams,
  SendQuestionMessage400,
  SendQuestionMessage401,
  SendQuestionMessage403,
  SendQuestionMessage404,
  SendQuestionMessage429,
  SendQuestionMessage500,
} from '../../types/SendQuestionMessage'
import type { UseMutationOptions, QueryClient } from '@tanstack/react-query'
import { sendQuestionMessage } from '../operations/sendQuestionMessage'
import { useMutation } from '@tanstack/react-query'

export const sendQuestionMessageMutationKey = () =>
  [{ url: '/conversations/{conversationId}/messages/send-question' }] as const

export type SendQuestionMessageMutationKey = ReturnType<
  typeof sendQuestionMessageMutationKey
>

/**
 * @description Send a question message to a conversation
 * {@link /conversations/:conversationId/messages/send-question}
 */
export function useSendQuestionMessage<TContext>(
  options: {
    mutation?: UseMutationOptions<
      SendQuestionMessageMutationResponse,
      ResponseErrorConfig<
        | SendQuestionMessage400
        | SendQuestionMessage401
        | SendQuestionMessage403
        | SendQuestionMessage404
        | SendQuestionMessage429
        | SendQuestionMessage500
      >,
      {
        conversationId: SendQuestionMessagePathParams['conversationId']
        data: SendQuestionMessageMutationRequest
      },
      TContext
    > & { client?: QueryClient }
    client?: Partial<RequestConfig<SendQuestionMessageMutationRequest>> & {
      client?: typeof fetch
    }
  } = {},
) {
  const { mutation = {}, client: config = {} } = options ?? {}
  const { client: queryClient, ...mutationOptions } = mutation
  const mutationKey =
    mutationOptions.mutationKey ?? sendQuestionMessageMutationKey()

  return useMutation<
    SendQuestionMessageMutationResponse,
    ResponseErrorConfig<
      | SendQuestionMessage400
      | SendQuestionMessage401
      | SendQuestionMessage403
      | SendQuestionMessage404
      | SendQuestionMessage429
      | SendQuestionMessage500
    >,
    {
      conversationId: SendQuestionMessagePathParams['conversationId']
      data: SendQuestionMessageMutationRequest
    },
    TContext
  >(
    {
      mutationFn: async ({ conversationId, data }) => {
        return sendQuestionMessage({ conversationId, data }, config)
      },
      mutationKey,
      ...mutationOptions,
    },
    queryClient,
  )
}
