/**
 * Generated by Kubb (https://kubb.dev/).
 * Do not edit manually.
 */

import fetch from '../../../../client/fetch-react-query'
import type {
  RequestConfig,
  ResponseErrorConfig,
} from '../../../../client/fetch-react-query'
import type {
  GetStructuredSourceQueryResponse,
  GetStructuredSourcePathParams,
  GetStructuredSourceQueryParams,
  GetStructuredSource400,
  GetStructuredSource401,
  GetStructuredSource403,
  GetStructuredSource404,
  GetStructuredSource429,
  GetStructuredSource500,
} from '../../types/GetStructuredSource'
import type {
  QueryKey,
  QueryClient,
  QueryObserverOptions,
  UseQueryResult,
} from '@tanstack/react-query'
import { getStructuredSource } from '../operations/getStructuredSource'
import { queryOptions, useQuery } from '@tanstack/react-query'

export const getStructuredSourceQueryKey = (
  { sourceId }: { sourceId: GetStructuredSourcePathParams['sourceId'] },
  params?: GetStructuredSourceQueryParams,
) =>
  [
    { url: '/sources/:sourceId/structured', params: { sourceId: sourceId } },
    ...(params ? [params] : []),
  ] as const

export type GetStructuredSourceQueryKey = ReturnType<
  typeof getStructuredSourceQueryKey
>

export function getStructuredSourceQueryOptions(
  {
    sourceId,
    params,
  }: {
    sourceId: GetStructuredSourcePathParams['sourceId']
    params?: GetStructuredSourceQueryParams
  },
  config: Partial<RequestConfig> & { client?: typeof fetch } = {},
) {
  const queryKey = getStructuredSourceQueryKey({ sourceId }, params)
  return queryOptions<
    GetStructuredSourceQueryResponse,
    ResponseErrorConfig<
      | GetStructuredSource400
      | GetStructuredSource401
      | GetStructuredSource403
      | GetStructuredSource404
      | GetStructuredSource429
      | GetStructuredSource500
    >,
    GetStructuredSourceQueryResponse,
    typeof queryKey
  >({
    enabled: !!sourceId,
    queryKey,
    queryFn: async ({ signal }) => {
      config.signal = signal
      return getStructuredSource({ sourceId, params }, config)
    },
  })
}

/**
 * @description Get structured source details
 * {@link /sources/:sourceId/structured}
 */
export function useGetStructuredSource<
  TData = GetStructuredSourceQueryResponse,
  TQueryData = GetStructuredSourceQueryResponse,
  TQueryKey extends QueryKey = GetStructuredSourceQueryKey,
>(
  {
    sourceId,
    params,
  }: {
    sourceId: GetStructuredSourcePathParams['sourceId']
    params?: GetStructuredSourceQueryParams
  },
  options: {
    query?: Partial<
      QueryObserverOptions<
        GetStructuredSourceQueryResponse,
        ResponseErrorConfig<
          | GetStructuredSource400
          | GetStructuredSource401
          | GetStructuredSource403
          | GetStructuredSource404
          | GetStructuredSource429
          | GetStructuredSource500
        >,
        TData,
        TQueryData,
        TQueryKey
      >
    > & { client?: QueryClient }
    client?: Partial<RequestConfig> & { client?: typeof fetch }
  } = {},
) {
  const {
    query: { client: queryClient, ...queryOptions } = {},
    client: config = {},
  } = options ?? {}
  const queryKey =
    queryOptions?.queryKey ?? getStructuredSourceQueryKey({ sourceId }, params)

  const query = useQuery(
    {
      ...getStructuredSourceQueryOptions({ sourceId, params }, config),
      queryKey,
      ...queryOptions,
    } as unknown as QueryObserverOptions,
    queryClient,
  ) as UseQueryResult<
    TData,
    ResponseErrorConfig<
      | GetStructuredSource400
      | GetStructuredSource401
      | GetStructuredSource403
      | GetStructuredSource404
      | GetStructuredSource429
      | GetStructuredSource500
    >
  > & { queryKey: TQueryKey }

  query.queryKey = queryKey as TQueryKey

  return query
}
