/**
 * Generated by Kubb (https://kubb.dev/).
 * Do not edit manually.
 */

import fetch from '../../../../client/fetch-react-query'
import type {
  RequestConfig,
  ResponseErrorConfig,
} from '../../../../client/fetch-react-query'
import type {
  ListSourcesQueryResponse,
  ListSourcesQueryParams,
  ListSources400,
  ListSources401,
  ListSources403,
  ListSources404,
  ListSources429,
  ListSources500,
} from '../../types/ListSources'
import type {
  QueryKey,
  QueryClient,
  QueryObserverOptions,
  UseQueryResult,
} from '@tanstack/react-query'
import { listSources } from '../operations/listSources'
import { queryOptions, useQuery } from '@tanstack/react-query'

export const listSourcesQueryKey = (params?: ListSourcesQueryParams) =>
  [{ url: '/sources' }, ...(params ? [params] : [])] as const

export type ListSourcesQueryKey = ReturnType<typeof listSourcesQueryKey>

export function listSourcesQueryOptions(
  { params }: { params?: ListSourcesQueryParams },
  config: Partial<RequestConfig> & { client?: typeof fetch } = {},
) {
  const queryKey = listSourcesQueryKey(params)
  return queryOptions<
    ListSourcesQueryResponse,
    ResponseErrorConfig<
      | ListSources400
      | ListSources401
      | ListSources403
      | ListSources404
      | ListSources429
      | ListSources500
    >,
    ListSourcesQueryResponse,
    typeof queryKey
  >({
    queryKey,
    queryFn: async ({ signal }) => {
      config.signal = signal
      return listSources({ params }, config)
    },
  })
}

/**
 * @description Get all sources
 * {@link /sources}
 */
export function useListSources<
  TData = ListSourcesQueryResponse,
  TQueryData = ListSourcesQueryResponse,
  TQueryKey extends QueryKey = ListSourcesQueryKey,
>(
  { params }: { params?: ListSourcesQueryParams },
  options: {
    query?: Partial<
      QueryObserverOptions<
        ListSourcesQueryResponse,
        ResponseErrorConfig<
          | ListSources400
          | ListSources401
          | ListSources403
          | ListSources404
          | ListSources429
          | ListSources500
        >,
        TData,
        TQueryData,
        TQueryKey
      >
    > & { client?: QueryClient }
    client?: Partial<RequestConfig> & { client?: typeof fetch }
  } = {},
) {
  const {
    query: { client: queryClient, ...queryOptions } = {},
    client: config = {},
  } = options ?? {}
  const queryKey = queryOptions?.queryKey ?? listSourcesQueryKey(params)

  const query = useQuery(
    {
      ...listSourcesQueryOptions({ params }, config),
      queryKey,
      ...queryOptions,
    } as unknown as QueryObserverOptions,
    queryClient,
  ) as UseQueryResult<
    TData,
    ResponseErrorConfig<
      | ListSources400
      | ListSources401
      | ListSources403
      | ListSources404
      | ListSources429
      | ListSources500
    >
  > & {
    queryKey: TQueryKey
  }

  query.queryKey = queryKey as TQueryKey

  return query
}
