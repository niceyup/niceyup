/**
 * Generated by Kubb (https://kubb.dev/).
 * Do not edit manually.
 */

import fetch from '../../../client/fetch-react-query'
import type {
  RequestConfig,
  ResponseErrorConfig,
} from '../../../client/fetch-react-query'
import type {
  GetProfileQueryResponse,
  GetProfile400,
  GetProfile401,
  GetProfile403,
  GetProfile404,
  GetProfile429,
  GetProfile500,
} from '../../types/GetProfile'
import type {
  QueryKey,
  QueryClient,
  QueryObserverOptions,
  UseQueryResult,
} from '@tanstack/react-query'
import { getProfile } from '../operations/getProfile'
import { queryOptions, useQuery } from '@tanstack/react-query'

export const getProfileQueryKey = () => [{ url: '/profile' }] as const

export type GetProfileQueryKey = ReturnType<typeof getProfileQueryKey>

export function getProfileQueryOptions(
  config: Partial<RequestConfig> & { client?: typeof fetch } = {},
) {
  const queryKey = getProfileQueryKey()
  return queryOptions<
    GetProfileQueryResponse,
    ResponseErrorConfig<
      | GetProfile400
      | GetProfile401
      | GetProfile403
      | GetProfile404
      | GetProfile429
      | GetProfile500
    >,
    GetProfileQueryResponse,
    typeof queryKey
  >({
    queryKey,
    queryFn: async ({ signal }) => {
      config.signal = signal
      return getProfile(config)
    },
  })
}

/**
 * @description Get current user profile
 * {@link /profile}
 */
export function useGetProfile<
  TData = GetProfileQueryResponse,
  TQueryData = GetProfileQueryResponse,
  TQueryKey extends QueryKey = GetProfileQueryKey,
>(
  options: {
    query?: Partial<
      QueryObserverOptions<
        GetProfileQueryResponse,
        ResponseErrorConfig<
          | GetProfile400
          | GetProfile401
          | GetProfile403
          | GetProfile404
          | GetProfile429
          | GetProfile500
        >,
        TData,
        TQueryData,
        TQueryKey
      >
    > & { client?: QueryClient }
    client?: Partial<RequestConfig> & { client?: typeof fetch }
  } = {},
) {
  const {
    query: { client: queryClient, ...queryOptions } = {},
    client: config = {},
  } = options ?? {}
  const queryKey = queryOptions?.queryKey ?? getProfileQueryKey()

  const query = useQuery(
    {
      ...getProfileQueryOptions(config),
      queryKey,
      ...queryOptions,
    } as unknown as QueryObserverOptions,
    queryClient,
  ) as UseQueryResult<
    TData,
    ResponseErrorConfig<
      | GetProfile400
      | GetProfile401
      | GetProfile403
      | GetProfile404
      | GetProfile429
      | GetProfile500
    >
  > & {
    queryKey: TQueryKey
  }

  query.queryKey = queryKey as TQueryKey

  return query
}
