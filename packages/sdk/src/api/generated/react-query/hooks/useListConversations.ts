/**
 * Generated by Kubb (https://kubb.dev/).
 * Do not edit manually.
 */

import fetch from '../../../../client/fetch-react-query'
import type {
  RequestConfig,
  ResponseErrorConfig,
} from '../../../../client/fetch-react-query'
import type {
  ListConversationsQueryResponse,
  ListConversationsQueryParams,
  ListConversations400,
  ListConversations401,
  ListConversations403,
  ListConversations404,
  ListConversations429,
  ListConversations500,
} from '../../types/ListConversations'
import type {
  QueryKey,
  QueryClient,
  QueryObserverOptions,
  UseQueryResult,
} from '@tanstack/react-query'
import { listConversations } from '../operations/listConversations'
import { queryOptions, useQuery } from '@tanstack/react-query'

export const listConversationsQueryKey = (
  params: ListConversationsQueryParams,
) => [{ url: '/conversations' }, ...(params ? [params] : [])] as const

export type ListConversationsQueryKey = ReturnType<
  typeof listConversationsQueryKey
>

export function listConversationsQueryOptions(
  { params }: { params: ListConversationsQueryParams },
  config: Partial<RequestConfig> & { client?: typeof fetch } = {},
) {
  const queryKey = listConversationsQueryKey(params)
  return queryOptions<
    ListConversationsQueryResponse,
    ResponseErrorConfig<
      | ListConversations400
      | ListConversations401
      | ListConversations403
      | ListConversations404
      | ListConversations429
      | ListConversations500
    >,
    ListConversationsQueryResponse,
    typeof queryKey
  >({
    enabled: !!params,
    queryKey,
    queryFn: async ({ signal }) => {
      config.signal = signal
      return listConversations({ params }, config)
    },
  })
}

/**
 * @description Get all conversations
 * {@link /conversations}
 */
export function useListConversations<
  TData = ListConversationsQueryResponse,
  TQueryData = ListConversationsQueryResponse,
  TQueryKey extends QueryKey = ListConversationsQueryKey,
>(
  { params }: { params: ListConversationsQueryParams },
  options: {
    query?: Partial<
      QueryObserverOptions<
        ListConversationsQueryResponse,
        ResponseErrorConfig<
          | ListConversations400
          | ListConversations401
          | ListConversations403
          | ListConversations404
          | ListConversations429
          | ListConversations500
        >,
        TData,
        TQueryData,
        TQueryKey
      >
    > & { client?: QueryClient }
    client?: Partial<RequestConfig> & { client?: typeof fetch }
  } = {},
) {
  const {
    query: { client: queryClient, ...queryOptions } = {},
    client: config = {},
  } = options ?? {}
  const queryKey = queryOptions?.queryKey ?? listConversationsQueryKey(params)

  const query = useQuery(
    {
      ...listConversationsQueryOptions({ params }, config),
      queryKey,
      ...queryOptions,
    } as unknown as QueryObserverOptions,
    queryClient,
  ) as UseQueryResult<
    TData,
    ResponseErrorConfig<
      | ListConversations400
      | ListConversations401
      | ListConversations403
      | ListConversations404
      | ListConversations429
      | ListConversations500
    >
  > & { queryKey: TQueryKey }

  query.queryKey = queryKey as TQueryKey

  return query
}
