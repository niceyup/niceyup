/**
 * Generated by Kubb (https://kubb.dev/).
 * Do not edit manually.
 */

import fetch from '../../../../client/fetch-react-query'
import type {
  RequestConfig,
  ResponseErrorConfig,
} from '../../../../client/fetch-react-query'
import type {
  UpdateSourceMutationRequest,
  UpdateSourceMutationResponse,
  UpdateSourcePathParams,
  UpdateSource400,
  UpdateSource401,
  UpdateSource403,
  UpdateSource404,
  UpdateSource429,
  UpdateSource500,
} from '../../types/UpdateSource'
import type { UseMutationOptions, QueryClient } from '@tanstack/react-query'
import { updateSource } from '../operations/updateSource'
import { useMutation } from '@tanstack/react-query'

export const updateSourceMutationKey = () =>
  [{ url: '/sources/{sourceId}' }] as const

export type UpdateSourceMutationKey = ReturnType<typeof updateSourceMutationKey>

/**
 * @description Update a source
 * {@link /sources/:sourceId}
 */
export function useUpdateSource<TContext>(
  options: {
    mutation?: UseMutationOptions<
      UpdateSourceMutationResponse,
      ResponseErrorConfig<
        | UpdateSource400
        | UpdateSource401
        | UpdateSource403
        | UpdateSource404
        | UpdateSource429
        | UpdateSource500
      >,
      {
        sourceId: UpdateSourcePathParams['sourceId']
        data: UpdateSourceMutationRequest
      },
      TContext
    > & { client?: QueryClient }
    client?: Partial<RequestConfig<UpdateSourceMutationRequest>> & {
      client?: typeof fetch
    }
  } = {},
) {
  const { mutation = {}, client: config = {} } = options ?? {}
  const { client: queryClient, ...mutationOptions } = mutation
  const mutationKey = mutationOptions.mutationKey ?? updateSourceMutationKey()

  return useMutation<
    UpdateSourceMutationResponse,
    ResponseErrorConfig<
      | UpdateSource400
      | UpdateSource401
      | UpdateSource403
      | UpdateSource404
      | UpdateSource429
      | UpdateSource500
    >,
    {
      sourceId: UpdateSourcePathParams['sourceId']
      data: UpdateSourceMutationRequest
    },
    TContext
  >(
    {
      mutationFn: async ({ sourceId, data }) => {
        return updateSource({ sourceId, data }, config)
      },
      mutationKey,
      ...mutationOptions,
    },
    queryClient,
  )
}
