/**
 * Generated by Kubb (https://kubb.dev/).
 * Do not edit manually.
 */

import fetch from '../../../../client/fetch-react-query'
import type {
  RequestConfig,
  ResponseErrorConfig,
} from '../../../../client/fetch-react-query'
import type {
  DeleteConversationMutationRequest,
  DeleteConversationMutationResponse,
  DeleteConversationPathParams,
  DeleteConversation400,
  DeleteConversation401,
  DeleteConversation403,
  DeleteConversation404,
  DeleteConversation429,
  DeleteConversation500,
} from '../../types/DeleteConversation'
import type { UseMutationOptions, QueryClient } from '@tanstack/react-query'
import { deleteConversation } from '../operations/deleteConversation'
import { useMutation } from '@tanstack/react-query'

export const deleteConversationMutationKey = () =>
  [{ url: '/conversations/{conversationId}' }] as const

export type DeleteConversationMutationKey = ReturnType<
  typeof deleteConversationMutationKey
>

/**
 * @description Delete a conversation
 * {@link /conversations/:conversationId}
 */
export function useDeleteConversation<TContext>(
  options: {
    mutation?: UseMutationOptions<
      DeleteConversationMutationResponse,
      ResponseErrorConfig<
        | DeleteConversation400
        | DeleteConversation401
        | DeleteConversation403
        | DeleteConversation404
        | DeleteConversation429
        | DeleteConversation500
      >,
      {
        conversationId: DeleteConversationPathParams['conversationId']
        data: DeleteConversationMutationRequest
      },
      TContext
    > & { client?: QueryClient }
    client?: Partial<RequestConfig<DeleteConversationMutationRequest>> & {
      client?: typeof fetch
    }
  } = {},
) {
  const { mutation = {}, client: config = {} } = options ?? {}
  const { client: queryClient, ...mutationOptions } = mutation
  const mutationKey =
    mutationOptions.mutationKey ?? deleteConversationMutationKey()

  return useMutation<
    DeleteConversationMutationResponse,
    ResponseErrorConfig<
      | DeleteConversation400
      | DeleteConversation401
      | DeleteConversation403
      | DeleteConversation404
      | DeleteConversation429
      | DeleteConversation500
    >,
    {
      conversationId: DeleteConversationPathParams['conversationId']
      data: DeleteConversationMutationRequest
    },
    TContext
  >(
    {
      mutationFn: async ({ conversationId, data }) => {
        return deleteConversation({ conversationId, data }, config)
      },
      mutationKey,
      ...mutationOptions,
    },
    queryClient,
  )
}
