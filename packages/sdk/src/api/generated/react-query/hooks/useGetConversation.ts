/**
 * Generated by Kubb (https://kubb.dev/).
 * Do not edit manually.
 */

import fetch from '../../../../client/fetch-react-query'
import type {
  RequestConfig,
  ResponseErrorConfig,
} from '../../../../client/fetch-react-query'
import type {
  GetConversationQueryResponse,
  GetConversationPathParams,
  GetConversation400,
  GetConversation401,
  GetConversation403,
  GetConversation404,
  GetConversation429,
  GetConversation500,
} from '../../types/GetConversation'
import type {
  QueryKey,
  QueryClient,
  QueryObserverOptions,
  UseQueryResult,
} from '@tanstack/react-query'
import { getConversation } from '../operations/getConversation'
import { queryOptions, useQuery } from '@tanstack/react-query'

export const getConversationQueryKey = ({
  conversationId,
}: { conversationId: GetConversationPathParams['conversationId'] }) =>
  [
    {
      url: '/conversations/:conversationId',
      params: { conversationId: conversationId },
    },
  ] as const

export type GetConversationQueryKey = ReturnType<typeof getConversationQueryKey>

export function getConversationQueryOptions(
  {
    conversationId,
  }: { conversationId: GetConversationPathParams['conversationId'] },
  config: Partial<RequestConfig> & { client?: typeof fetch } = {},
) {
  const queryKey = getConversationQueryKey({ conversationId })
  return queryOptions<
    GetConversationQueryResponse,
    ResponseErrorConfig<
      | GetConversation400
      | GetConversation401
      | GetConversation403
      | GetConversation404
      | GetConversation429
      | GetConversation500
    >,
    GetConversationQueryResponse,
    typeof queryKey
  >({
    enabled: !!conversationId,
    queryKey,
    queryFn: async ({ signal }) => {
      config.signal = signal
      return getConversation({ conversationId }, config)
    },
  })
}

/**
 * @description Get conversation details
 * {@link /conversations/:conversationId}
 */
export function useGetConversation<
  TData = GetConversationQueryResponse,
  TQueryData = GetConversationQueryResponse,
  TQueryKey extends QueryKey = GetConversationQueryKey,
>(
  {
    conversationId,
  }: { conversationId: GetConversationPathParams['conversationId'] },
  options: {
    query?: Partial<
      QueryObserverOptions<
        GetConversationQueryResponse,
        ResponseErrorConfig<
          | GetConversation400
          | GetConversation401
          | GetConversation403
          | GetConversation404
          | GetConversation429
          | GetConversation500
        >,
        TData,
        TQueryData,
        TQueryKey
      >
    > & { client?: QueryClient }
    client?: Partial<RequestConfig> & { client?: typeof fetch }
  } = {},
) {
  const {
    query: { client: queryClient, ...queryOptions } = {},
    client: config = {},
  } = options ?? {}
  const queryKey =
    queryOptions?.queryKey ?? getConversationQueryKey({ conversationId })

  const query = useQuery(
    {
      ...getConversationQueryOptions({ conversationId }, config),
      queryKey,
      ...queryOptions,
    } as unknown as QueryObserverOptions,
    queryClient,
  ) as UseQueryResult<
    TData,
    ResponseErrorConfig<
      | GetConversation400
      | GetConversation401
      | GetConversation403
      | GetConversation404
      | GetConversation429
      | GetConversation500
    >
  > & { queryKey: TQueryKey }

  query.queryKey = queryKey as TQueryKey

  return query
}
