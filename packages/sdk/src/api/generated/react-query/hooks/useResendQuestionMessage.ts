/**
 * Generated by Kubb (https://kubb.dev/).
 * Do not edit manually.
 */

import fetch from '../../../../client/fetch-react-query'
import type {
  RequestConfig,
  ResponseErrorConfig,
} from '../../../../client/fetch-react-query'
import type {
  ResendQuestionMessageMutationRequest,
  ResendQuestionMessageMutationResponse,
  ResendQuestionMessagePathParams,
  ResendQuestionMessage400,
  ResendQuestionMessage401,
  ResendQuestionMessage403,
  ResendQuestionMessage404,
  ResendQuestionMessage429,
  ResendQuestionMessage500,
} from '../../types/ResendQuestionMessage'
import type { UseMutationOptions, QueryClient } from '@tanstack/react-query'
import { resendQuestionMessage } from '../operations/resendQuestionMessage'
import { useMutation } from '@tanstack/react-query'

export const resendQuestionMessageMutationKey = () =>
  [{ url: '/conversations/{conversationId}/messages/resend-question' }] as const

export type ResendQuestionMessageMutationKey = ReturnType<
  typeof resendQuestionMessageMutationKey
>

/**
 * @description Resend a question message to a conversation
 * {@link /conversations/:conversationId/messages/resend-question}
 */
export function useResendQuestionMessage<TContext>(
  options: {
    mutation?: UseMutationOptions<
      ResendQuestionMessageMutationResponse,
      ResponseErrorConfig<
        | ResendQuestionMessage400
        | ResendQuestionMessage401
        | ResendQuestionMessage403
        | ResendQuestionMessage404
        | ResendQuestionMessage429
        | ResendQuestionMessage500
      >,
      {
        conversationId: ResendQuestionMessagePathParams['conversationId']
        data: ResendQuestionMessageMutationRequest
      },
      TContext
    > & { client?: QueryClient }
    client?: Partial<RequestConfig<ResendQuestionMessageMutationRequest>> & {
      client?: typeof fetch
    }
  } = {},
) {
  const { mutation = {}, client: config = {} } = options ?? {}
  const { client: queryClient, ...mutationOptions } = mutation
  const mutationKey =
    mutationOptions.mutationKey ?? resendQuestionMessageMutationKey()

  return useMutation<
    ResendQuestionMessageMutationResponse,
    ResponseErrorConfig<
      | ResendQuestionMessage400
      | ResendQuestionMessage401
      | ResendQuestionMessage403
      | ResendQuestionMessage404
      | ResendQuestionMessage429
      | ResendQuestionMessage500
    >,
    {
      conversationId: ResendQuestionMessagePathParams['conversationId']
      data: ResendQuestionMessageMutationRequest
    },
    TContext
  >(
    {
      mutationFn: async ({ conversationId, data }) => {
        return resendQuestionMessage({ conversationId, data }, config)
      },
      mutationKey,
      ...mutationOptions,
    },
    queryClient,
  )
}
