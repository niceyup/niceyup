/**
 * Generated by Kubb (https://kubb.dev/).
 * Do not edit manually.
 */

import fetch from '../../../../client/fetch-react-query'
import type {
  RequestConfig,
  ResponseErrorConfig,
} from '../../../../client/fetch-react-query'
import type {
  GenerateUploadSignatureMutationRequest,
  GenerateUploadSignatureMutationResponse,
  GenerateUploadSignatureHeaderParams,
  GenerateUploadSignature400,
  GenerateUploadSignature401,
  GenerateUploadSignature403,
  GenerateUploadSignature404,
  GenerateUploadSignature429,
  GenerateUploadSignature500,
} from '../../types/GenerateUploadSignature'
import type { UseMutationOptions, QueryClient } from '@tanstack/react-query'
import { generateUploadSignature } from '../operations/generateUploadSignature'
import { useMutation } from '@tanstack/react-query'

export const generateUploadSignatureMutationKey = () =>
  [{ url: '/files/signature' }] as const

export type GenerateUploadSignatureMutationKey = ReturnType<
  typeof generateUploadSignatureMutationKey
>

/**
 * @description Generate Upload Signature
 * {@link /files/signature}
 */
export function useGenerateUploadSignature<TContext>(
  options: {
    mutation?: UseMutationOptions<
      GenerateUploadSignatureMutationResponse,
      ResponseErrorConfig<
        | GenerateUploadSignature400
        | GenerateUploadSignature401
        | GenerateUploadSignature403
        | GenerateUploadSignature404
        | GenerateUploadSignature429
        | GenerateUploadSignature500
      >,
      {
        data: GenerateUploadSignatureMutationRequest
        headers: GenerateUploadSignatureHeaderParams
      },
      TContext
    > & { client?: QueryClient }
    client?: Partial<RequestConfig<GenerateUploadSignatureMutationRequest>> & {
      client?: typeof fetch
    }
  } = {},
) {
  const { mutation = {}, client: config = {} } = options ?? {}
  const { client: queryClient, ...mutationOptions } = mutation
  const mutationKey =
    mutationOptions.mutationKey ?? generateUploadSignatureMutationKey()

  return useMutation<
    GenerateUploadSignatureMutationResponse,
    ResponseErrorConfig<
      | GenerateUploadSignature400
      | GenerateUploadSignature401
      | GenerateUploadSignature403
      | GenerateUploadSignature404
      | GenerateUploadSignature429
      | GenerateUploadSignature500
    >,
    {
      data: GenerateUploadSignatureMutationRequest
      headers: GenerateUploadSignatureHeaderParams
    },
    TContext
  >(
    {
      mutationFn: async ({ data, headers }) => {
        return generateUploadSignature({ data, headers }, config)
      },
      mutationKey,
      ...mutationOptions,
    },
    queryClient,
  )
}
