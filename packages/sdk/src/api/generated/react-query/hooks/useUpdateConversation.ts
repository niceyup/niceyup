/**
 * Generated by Kubb (https://kubb.dev/).
 * Do not edit manually.
 */

import fetch from '../../../../client/fetch-react-query'
import type {
  RequestConfig,
  ResponseErrorConfig,
} from '../../../../client/fetch-react-query'
import type {
  UpdateConversationMutationRequest,
  UpdateConversationMutationResponse,
  UpdateConversationPathParams,
  UpdateConversation400,
  UpdateConversation401,
  UpdateConversation403,
  UpdateConversation404,
  UpdateConversation429,
  UpdateConversation500,
} from '../../types/UpdateConversation'
import type { UseMutationOptions, QueryClient } from '@tanstack/react-query'
import { updateConversation } from '../operations/updateConversation'
import { useMutation } from '@tanstack/react-query'

export const updateConversationMutationKey = () =>
  [{ url: '/conversations/{conversationId}' }] as const

export type UpdateConversationMutationKey = ReturnType<
  typeof updateConversationMutationKey
>

/**
 * @description Update a conversation
 * {@link /conversations/:conversationId}
 */
export function useUpdateConversation<TContext>(
  options: {
    mutation?: UseMutationOptions<
      UpdateConversationMutationResponse,
      ResponseErrorConfig<
        | UpdateConversation400
        | UpdateConversation401
        | UpdateConversation403
        | UpdateConversation404
        | UpdateConversation429
        | UpdateConversation500
      >,
      {
        conversationId: UpdateConversationPathParams['conversationId']
        data: UpdateConversationMutationRequest
      },
      TContext
    > & { client?: QueryClient }
    client?: Partial<RequestConfig<UpdateConversationMutationRequest>> & {
      client?: typeof fetch
    }
  } = {},
) {
  const { mutation = {}, client: config = {} } = options ?? {}
  const { client: queryClient, ...mutationOptions } = mutation
  const mutationKey =
    mutationOptions.mutationKey ?? updateConversationMutationKey()

  return useMutation<
    UpdateConversationMutationResponse,
    ResponseErrorConfig<
      | UpdateConversation400
      | UpdateConversation401
      | UpdateConversation403
      | UpdateConversation404
      | UpdateConversation429
      | UpdateConversation500
    >,
    {
      conversationId: UpdateConversationPathParams['conversationId']
      data: UpdateConversationMutationRequest
    },
    TContext
  >(
    {
      mutationFn: async ({ conversationId, data }) => {
        return updateConversation({ conversationId, data }, config)
      },
      mutationKey,
      ...mutationOptions,
    },
    queryClient,
  )
}
