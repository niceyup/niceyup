/**
 * Generated by Kubb (https://kubb.dev/).
 * Do not edit manually.
 */

import fetch from '../../../../client/fetch-react-query'
import type {
  RequestConfig,
  ResponseErrorConfig,
} from '../../../../client/fetch-react-query'
import type {
  GetFileQueryResponse,
  GetFilePathParams,
  GetFileQueryParams,
  GetFile400,
  GetFile401,
  GetFile403,
  GetFile404,
  GetFile429,
  GetFile500,
} from '../../types/GetFile'
import type {
  QueryKey,
  QueryClient,
  QueryObserverOptions,
  UseQueryResult,
} from '@tanstack/react-query'
import { getFile } from '../operations/getFile'
import { queryOptions, useQuery } from '@tanstack/react-query'

export const getFileQueryKey = (
  { fileId }: { fileId: GetFilePathParams['fileId'] },
  params?: GetFileQueryParams,
) =>
  [
    { url: '/files/:fileId', params: { fileId: fileId } },
    ...(params ? [params] : []),
  ] as const

export type GetFileQueryKey = ReturnType<typeof getFileQueryKey>

export function getFileQueryOptions(
  {
    fileId,
    params,
  }: { fileId: GetFilePathParams['fileId']; params?: GetFileQueryParams },
  config: Partial<RequestConfig> & { client?: typeof fetch } = {},
) {
  const queryKey = getFileQueryKey({ fileId }, params)
  return queryOptions<
    GetFileQueryResponse,
    ResponseErrorConfig<
      | GetFile400
      | GetFile401
      | GetFile403
      | GetFile404
      | GetFile429
      | GetFile500
    >,
    GetFileQueryResponse,
    typeof queryKey
  >({
    enabled: !!fileId,
    queryKey,
    queryFn: async ({ signal }) => {
      config.signal = signal
      return getFile({ fileId, params }, config)
    },
  })
}

/**
 * @description Get a file
 * {@link /files/:fileId}
 */
export function useGetFile<
  TData = GetFileQueryResponse,
  TQueryData = GetFileQueryResponse,
  TQueryKey extends QueryKey = GetFileQueryKey,
>(
  {
    fileId,
    params,
  }: { fileId: GetFilePathParams['fileId']; params?: GetFileQueryParams },
  options: {
    query?: Partial<
      QueryObserverOptions<
        GetFileQueryResponse,
        ResponseErrorConfig<
          | GetFile400
          | GetFile401
          | GetFile403
          | GetFile404
          | GetFile429
          | GetFile500
        >,
        TData,
        TQueryData,
        TQueryKey
      >
    > & { client?: QueryClient }
    client?: Partial<RequestConfig> & { client?: typeof fetch }
  } = {},
) {
  const {
    query: { client: queryClient, ...queryOptions } = {},
    client: config = {},
  } = options ?? {}
  const queryKey = queryOptions?.queryKey ?? getFileQueryKey({ fileId }, params)

  const query = useQuery(
    {
      ...getFileQueryOptions({ fileId, params }, config),
      queryKey,
      ...queryOptions,
    } as unknown as QueryObserverOptions,
    queryClient,
  ) as UseQueryResult<
    TData,
    ResponseErrorConfig<
      | GetFile400
      | GetFile401
      | GetFile403
      | GetFile404
      | GetFile429
      | GetFile500
    >
  > & { queryKey: TQueryKey }

  query.queryKey = queryKey as TQueryKey

  return query
}
