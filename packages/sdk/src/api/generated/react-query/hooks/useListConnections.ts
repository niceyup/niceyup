/**
 * Generated by Kubb (https://kubb.dev/).
 * Do not edit manually.
 */

import fetch from '../../../../client/fetch-react-query'
import type {
  RequestConfig,
  ResponseErrorConfig,
} from '../../../../client/fetch-react-query'
import type {
  ListConnectionsQueryResponse,
  ListConnectionsQueryParams,
  ListConnections400,
  ListConnections401,
  ListConnections403,
  ListConnections404,
  ListConnections429,
  ListConnections500,
} from '../../types/ListConnections'
import type {
  QueryKey,
  QueryClient,
  QueryObserverOptions,
  UseQueryResult,
} from '@tanstack/react-query'
import { listConnections } from '../operations/listConnections'
import { queryOptions, useQuery } from '@tanstack/react-query'

export const listConnectionsQueryKey = (params?: ListConnectionsQueryParams) =>
  [{ url: '/connections' }, ...(params ? [params] : [])] as const

export type ListConnectionsQueryKey = ReturnType<typeof listConnectionsQueryKey>

export function listConnectionsQueryOptions(
  { params }: { params?: ListConnectionsQueryParams },
  config: Partial<RequestConfig> & { client?: typeof fetch } = {},
) {
  const queryKey = listConnectionsQueryKey(params)
  return queryOptions<
    ListConnectionsQueryResponse,
    ResponseErrorConfig<
      | ListConnections400
      | ListConnections401
      | ListConnections403
      | ListConnections404
      | ListConnections429
      | ListConnections500
    >,
    ListConnectionsQueryResponse,
    typeof queryKey
  >({
    queryKey,
    queryFn: async ({ signal }) => {
      config.signal = signal
      return listConnections({ params }, config)
    },
  })
}

/**
 * @description Get all connections
 * {@link /connections}
 */
export function useListConnections<
  TData = ListConnectionsQueryResponse,
  TQueryData = ListConnectionsQueryResponse,
  TQueryKey extends QueryKey = ListConnectionsQueryKey,
>(
  { params }: { params?: ListConnectionsQueryParams },
  options: {
    query?: Partial<
      QueryObserverOptions<
        ListConnectionsQueryResponse,
        ResponseErrorConfig<
          | ListConnections400
          | ListConnections401
          | ListConnections403
          | ListConnections404
          | ListConnections429
          | ListConnections500
        >,
        TData,
        TQueryData,
        TQueryKey
      >
    > & { client?: QueryClient }
    client?: Partial<RequestConfig> & { client?: typeof fetch }
  } = {},
) {
  const {
    query: { client: queryClient, ...queryOptions } = {},
    client: config = {},
  } = options ?? {}
  const queryKey = queryOptions?.queryKey ?? listConnectionsQueryKey(params)

  const query = useQuery(
    {
      ...listConnectionsQueryOptions({ params }, config),
      queryKey,
      ...queryOptions,
    } as unknown as QueryObserverOptions,
    queryClient,
  ) as UseQueryResult<
    TData,
    ResponseErrorConfig<
      | ListConnections400
      | ListConnections401
      | ListConnections403
      | ListConnections404
      | ListConnections429
      | ListConnections500
    >
  > & { queryKey: TQueryKey }

  query.queryKey = queryKey as TQueryKey

  return query
}
