/**
 * Generated by Kubb (https://kubb.dev/).
 * Do not edit manually.
 */

import fetch from '../../../../client/fetch-react-query'
import type {
  RequestConfig,
  ResponseErrorConfig,
} from '../../../../client/fetch-react-query'
import type {
  GetAgentQueryResponse,
  GetAgentPathParams,
  GetAgent400,
  GetAgent401,
  GetAgent403,
  GetAgent404,
  GetAgent429,
  GetAgent500,
} from '../../types/GetAgent'
import type {
  QueryKey,
  QueryClient,
  QueryObserverOptions,
  UseQueryResult,
} from '@tanstack/react-query'
import { getAgent } from '../operations/getAgent'
import { queryOptions, useQuery } from '@tanstack/react-query'

export const getAgentQueryKey = ({
  agentId,
}: { agentId: GetAgentPathParams['agentId'] }) =>
  [{ url: '/agents/:agentId', params: { agentId: agentId } }] as const

export type GetAgentQueryKey = ReturnType<typeof getAgentQueryKey>

export function getAgentQueryOptions(
  { agentId }: { agentId: GetAgentPathParams['agentId'] },
  config: Partial<RequestConfig> & { client?: typeof fetch } = {},
) {
  const queryKey = getAgentQueryKey({ agentId })
  return queryOptions<
    GetAgentQueryResponse,
    ResponseErrorConfig<
      | GetAgent400
      | GetAgent401
      | GetAgent403
      | GetAgent404
      | GetAgent429
      | GetAgent500
    >,
    GetAgentQueryResponse,
    typeof queryKey
  >({
    enabled: !!agentId,
    queryKey,
    queryFn: async ({ signal }) => {
      config.signal = signal
      return getAgent({ agentId }, config)
    },
  })
}

/**
 * @description Get agent details
 * {@link /agents/:agentId}
 */
export function useGetAgent<
  TData = GetAgentQueryResponse,
  TQueryData = GetAgentQueryResponse,
  TQueryKey extends QueryKey = GetAgentQueryKey,
>(
  { agentId }: { agentId: GetAgentPathParams['agentId'] },
  options: {
    query?: Partial<
      QueryObserverOptions<
        GetAgentQueryResponse,
        ResponseErrorConfig<
          | GetAgent400
          | GetAgent401
          | GetAgent403
          | GetAgent404
          | GetAgent429
          | GetAgent500
        >,
        TData,
        TQueryData,
        TQueryKey
      >
    > & { client?: QueryClient }
    client?: Partial<RequestConfig> & { client?: typeof fetch }
  } = {},
) {
  const {
    query: { client: queryClient, ...queryOptions } = {},
    client: config = {},
  } = options ?? {}
  const queryKey = queryOptions?.queryKey ?? getAgentQueryKey({ agentId })

  const query = useQuery(
    {
      ...getAgentQueryOptions({ agentId }, config),
      queryKey,
      ...queryOptions,
    } as unknown as QueryObserverOptions,
    queryClient,
  ) as UseQueryResult<
    TData,
    ResponseErrorConfig<
      | GetAgent400
      | GetAgent401
      | GetAgent403
      | GetAgent404
      | GetAgent429
      | GetAgent500
    >
  > & { queryKey: TQueryKey }

  query.queryKey = queryKey as TQueryKey

  return query
}
