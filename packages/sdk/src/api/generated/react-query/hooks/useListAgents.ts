/**
 * Generated by Kubb (https://kubb.dev/).
 * Do not edit manually.
 */

import fetch from '../../../../client/fetch-react-query'
import type {
  RequestConfig,
  ResponseErrorConfig,
} from '../../../../client/fetch-react-query'
import type {
  ListAgentsQueryResponse,
  ListAgents400,
  ListAgents401,
  ListAgents403,
  ListAgents404,
  ListAgents429,
  ListAgents500,
} from '../../types/ListAgents'
import type {
  QueryKey,
  QueryClient,
  QueryObserverOptions,
  UseQueryResult,
} from '@tanstack/react-query'
import { listAgents } from '../operations/listAgents'
import { queryOptions, useQuery } from '@tanstack/react-query'

export const listAgentsQueryKey = () => [{ url: '/agents' }] as const

export type ListAgentsQueryKey = ReturnType<typeof listAgentsQueryKey>

export function listAgentsQueryOptions(
  config: Partial<RequestConfig> & { client?: typeof fetch } = {},
) {
  const queryKey = listAgentsQueryKey()
  return queryOptions<
    ListAgentsQueryResponse,
    ResponseErrorConfig<
      | ListAgents400
      | ListAgents401
      | ListAgents403
      | ListAgents404
      | ListAgents429
      | ListAgents500
    >,
    ListAgentsQueryResponse,
    typeof queryKey
  >({
    queryKey,
    queryFn: async ({ signal }) => {
      config.signal = signal
      return listAgents(config)
    },
  })
}

/**
 * @description Get all agents
 * {@link /agents}
 */
export function useListAgents<
  TData = ListAgentsQueryResponse,
  TQueryData = ListAgentsQueryResponse,
  TQueryKey extends QueryKey = ListAgentsQueryKey,
>(
  options: {
    query?: Partial<
      QueryObserverOptions<
        ListAgentsQueryResponse,
        ResponseErrorConfig<
          | ListAgents400
          | ListAgents401
          | ListAgents403
          | ListAgents404
          | ListAgents429
          | ListAgents500
        >,
        TData,
        TQueryData,
        TQueryKey
      >
    > & { client?: QueryClient }
    client?: Partial<RequestConfig> & { client?: typeof fetch }
  } = {},
) {
  const {
    query: { client: queryClient, ...queryOptions } = {},
    client: config = {},
  } = options ?? {}
  const queryKey = queryOptions?.queryKey ?? listAgentsQueryKey()

  const query = useQuery(
    {
      ...listAgentsQueryOptions(config),
      queryKey,
      ...queryOptions,
    } as unknown as QueryObserverOptions,
    queryClient,
  ) as UseQueryResult<
    TData,
    ResponseErrorConfig<
      | ListAgents400
      | ListAgents401
      | ListAgents403
      | ListAgents404
      | ListAgents429
      | ListAgents500
    >
  > & {
    queryKey: TQueryKey
  }

  query.queryKey = queryKey as TQueryKey

  return query
}
