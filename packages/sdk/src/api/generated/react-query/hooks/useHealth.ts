/**
 * Generated by Kubb (https://kubb.dev/).
 * Do not edit manually.
 */

import fetch from '../../../client/fetch-react-query'
import type {
  RequestConfig,
  ResponseErrorConfig,
} from '../../../client/fetch-react-query'
import type {
  HealthQueryResponse,
  Health400,
  Health401,
  Health403,
  Health404,
  Health429,
  Health500,
} from '../../types/Health'
import type {
  QueryKey,
  QueryClient,
  QueryObserverOptions,
  UseQueryResult,
} from '@tanstack/react-query'
import { health } from '../operations/health'
import { queryOptions, useQuery } from '@tanstack/react-query'

export const healthQueryKey = () => [{ url: '/health' }] as const

export type HealthQueryKey = ReturnType<typeof healthQueryKey>

export function healthQueryOptions(
  config: Partial<RequestConfig> & { client?: typeof fetch } = {},
) {
  const queryKey = healthQueryKey()
  return queryOptions<
    HealthQueryResponse,
    ResponseErrorConfig<
      Health400 | Health401 | Health403 | Health404 | Health429 | Health500
    >,
    HealthQueryResponse,
    typeof queryKey
  >({
    queryKey,
    queryFn: async ({ signal }) => {
      config.signal = signal
      return health(config)
    },
  })
}

/**
 * @description Check if the server is running
 * {@link /health}
 */
export function useHealth<
  TData = HealthQueryResponse,
  TQueryData = HealthQueryResponse,
  TQueryKey extends QueryKey = HealthQueryKey,
>(
  options: {
    query?: Partial<
      QueryObserverOptions<
        HealthQueryResponse,
        ResponseErrorConfig<
          Health400 | Health401 | Health403 | Health404 | Health429 | Health500
        >,
        TData,
        TQueryData,
        TQueryKey
      >
    > & { client?: QueryClient }
    client?: Partial<RequestConfig> & { client?: typeof fetch }
  } = {},
) {
  const {
    query: { client: queryClient, ...queryOptions } = {},
    client: config = {},
  } = options ?? {}
  const queryKey = queryOptions?.queryKey ?? healthQueryKey()

  const query = useQuery(
    {
      ...healthQueryOptions(config),
      queryKey,
      ...queryOptions,
    } as unknown as QueryObserverOptions,
    queryClient,
  ) as UseQueryResult<
    TData,
    ResponseErrorConfig<
      Health400 | Health401 | Health403 | Health404 | Health429 | Health500
    >
  > & { queryKey: TQueryKey }

  query.queryKey = queryKey as TQueryKey

  return query
}
