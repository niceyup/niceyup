/**
 * Generated by Kubb (https://kubb.dev/).
 * Do not edit manually.
 */

import fetch from '../../../../client/fetch-react-query'
import type {
  RequestConfig,
  ResponseErrorConfig,
} from '../../../../client/fetch-react-query'
import type {
  StreamAnswerMessageQueryResponse,
  StreamAnswerMessagePathParams,
  StreamAnswerMessageQueryParams,
  StreamAnswerMessage400,
  StreamAnswerMessage401,
  StreamAnswerMessage403,
  StreamAnswerMessage404,
  StreamAnswerMessage429,
  StreamAnswerMessage500,
} from '../../types/StreamAnswerMessage'
import type {
  QueryKey,
  QueryClient,
  QueryObserverOptions,
  UseQueryResult,
} from '@tanstack/react-query'
import { streamAnswerMessage } from '../operations/streamAnswerMessage'
import { queryOptions, useQuery } from '@tanstack/react-query'

export const streamAnswerMessageQueryKey = (
  {
    conversationId,
    messageId,
  }: {
    conversationId: StreamAnswerMessagePathParams['conversationId']
    messageId: StreamAnswerMessagePathParams['messageId']
  },
  params: StreamAnswerMessageQueryParams,
) =>
  [
    {
      url: '/conversations/:conversationId/messages/:messageId/stream-answer',
      params: { conversationId: conversationId, messageId: messageId },
    },
    ...(params ? [params] : []),
  ] as const

export type StreamAnswerMessageQueryKey = ReturnType<
  typeof streamAnswerMessageQueryKey
>

export function streamAnswerMessageQueryOptions(
  {
    conversationId,
    messageId,
    params,
  }: {
    conversationId: StreamAnswerMessagePathParams['conversationId']
    messageId: StreamAnswerMessagePathParams['messageId']
    params: StreamAnswerMessageQueryParams
  },
  config: Partial<RequestConfig> & { client?: typeof fetch } = {},
) {
  const queryKey = streamAnswerMessageQueryKey(
    { conversationId, messageId },
    params,
  )
  return queryOptions<
    StreamAnswerMessageQueryResponse,
    ResponseErrorConfig<
      | StreamAnswerMessage400
      | StreamAnswerMessage401
      | StreamAnswerMessage403
      | StreamAnswerMessage404
      | StreamAnswerMessage429
      | StreamAnswerMessage500
    >,
    StreamAnswerMessageQueryResponse,
    typeof queryKey
  >({
    enabled: !!(conversationId && messageId && params),
    queryKey,
    queryFn: async ({ signal }) => {
      config.signal = signal
      return streamAnswerMessage({ conversationId, messageId, params }, config)
    },
  })
}

/**
 * @description Stream answer message details
 * {@link /conversations/:conversationId/messages/:messageId/stream-answer}
 */
export function useStreamAnswerMessage<
  TData = StreamAnswerMessageQueryResponse,
  TQueryData = StreamAnswerMessageQueryResponse,
  TQueryKey extends QueryKey = StreamAnswerMessageQueryKey,
>(
  {
    conversationId,
    messageId,
    params,
  }: {
    conversationId: StreamAnswerMessagePathParams['conversationId']
    messageId: StreamAnswerMessagePathParams['messageId']
    params: StreamAnswerMessageQueryParams
  },
  options: {
    query?: Partial<
      QueryObserverOptions<
        StreamAnswerMessageQueryResponse,
        ResponseErrorConfig<
          | StreamAnswerMessage400
          | StreamAnswerMessage401
          | StreamAnswerMessage403
          | StreamAnswerMessage404
          | StreamAnswerMessage429
          | StreamAnswerMessage500
        >,
        TData,
        TQueryData,
        TQueryKey
      >
    > & { client?: QueryClient }
    client?: Partial<RequestConfig> & { client?: typeof fetch }
  } = {},
) {
  const {
    query: { client: queryClient, ...queryOptions } = {},
    client: config = {},
  } = options ?? {}
  const queryKey =
    queryOptions?.queryKey ??
    streamAnswerMessageQueryKey({ conversationId, messageId }, params)

  const query = useQuery(
    {
      ...streamAnswerMessageQueryOptions(
        { conversationId, messageId, params },
        config,
      ),
      queryKey,
      ...queryOptions,
    } as unknown as QueryObserverOptions,
    queryClient,
  ) as UseQueryResult<
    TData,
    ResponseErrorConfig<
      | StreamAnswerMessage400
      | StreamAnswerMessage401
      | StreamAnswerMessage403
      | StreamAnswerMessage404
      | StreamAnswerMessage429
      | StreamAnswerMessage500
    >
  > & { queryKey: TQueryKey }

  query.queryKey = queryKey as TQueryKey

  return query
}
