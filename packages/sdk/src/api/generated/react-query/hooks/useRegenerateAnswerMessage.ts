/**
 * Generated by Kubb (https://kubb.dev/).
 * Do not edit manually.
 */

import fetch from '../../../../client/fetch-react-query'
import type {
  RequestConfig,
  ResponseErrorConfig,
} from '../../../../client/fetch-react-query'
import type {
  RegenerateAnswerMessageMutationRequest,
  RegenerateAnswerMessageMutationResponse,
  RegenerateAnswerMessagePathParams,
  RegenerateAnswerMessage400,
  RegenerateAnswerMessage401,
  RegenerateAnswerMessage403,
  RegenerateAnswerMessage404,
  RegenerateAnswerMessage429,
  RegenerateAnswerMessage500,
} from '../../types/RegenerateAnswerMessage'
import type { UseMutationOptions, QueryClient } from '@tanstack/react-query'
import { regenerateAnswerMessage } from '../operations/regenerateAnswerMessage'
import { useMutation } from '@tanstack/react-query'

export const regenerateAnswerMessageMutationKey = () =>
  [
    { url: '/conversations/{conversationId}/messages/regenerate-answer' },
  ] as const

export type RegenerateAnswerMessageMutationKey = ReturnType<
  typeof regenerateAnswerMessageMutationKey
>

/**
 * @description Regenerate an answer message to a conversation
 * {@link /conversations/:conversationId/messages/regenerate-answer}
 */
export function useRegenerateAnswerMessage<TContext>(
  options: {
    mutation?: UseMutationOptions<
      RegenerateAnswerMessageMutationResponse,
      ResponseErrorConfig<
        | RegenerateAnswerMessage400
        | RegenerateAnswerMessage401
        | RegenerateAnswerMessage403
        | RegenerateAnswerMessage404
        | RegenerateAnswerMessage429
        | RegenerateAnswerMessage500
      >,
      {
        conversationId: RegenerateAnswerMessagePathParams['conversationId']
        data: RegenerateAnswerMessageMutationRequest
      },
      TContext
    > & { client?: QueryClient }
    client?: Partial<RequestConfig<RegenerateAnswerMessageMutationRequest>> & {
      client?: typeof fetch
    }
  } = {},
) {
  const { mutation = {}, client: config = {} } = options ?? {}
  const { client: queryClient, ...mutationOptions } = mutation
  const mutationKey =
    mutationOptions.mutationKey ?? regenerateAnswerMessageMutationKey()

  return useMutation<
    RegenerateAnswerMessageMutationResponse,
    ResponseErrorConfig<
      | RegenerateAnswerMessage400
      | RegenerateAnswerMessage401
      | RegenerateAnswerMessage403
      | RegenerateAnswerMessage404
      | RegenerateAnswerMessage429
      | RegenerateAnswerMessage500
    >,
    {
      conversationId: RegenerateAnswerMessagePathParams['conversationId']
      data: RegenerateAnswerMessageMutationRequest
    },
    TContext
  >(
    {
      mutationFn: async ({ conversationId, data }) => {
        return regenerateAnswerMessage({ conversationId, data }, config)
      },
      mutationKey,
      ...mutationOptions,
    },
    queryClient,
  )
}
