/**
 * Generated by Kubb (https://kubb.dev/).
 * Do not edit manually.
 */

import fetch from '../../../../client/fetch-react-query'
import type {
  RequestConfig,
  ResponseErrorConfig,
} from '../../../../client/fetch-react-query'
import type {
  ListMessagesQueryResponse,
  ListMessagesPathParams,
  ListMessagesQueryParams,
  ListMessages400,
  ListMessages401,
  ListMessages403,
  ListMessages404,
  ListMessages429,
  ListMessages500,
} from '../../types/ListMessages'
import type {
  QueryKey,
  QueryClient,
  QueryObserverOptions,
  UseQueryResult,
} from '@tanstack/react-query'
import { listMessages } from '../operations/listMessages'
import { queryOptions, useQuery } from '@tanstack/react-query'

export const listMessagesQueryKey = (
  {
    conversationId,
  }: { conversationId: ListMessagesPathParams['conversationId'] },
  params: ListMessagesQueryParams,
) =>
  [
    {
      url: '/conversations/:conversationId/messages',
      params: { conversationId: conversationId },
    },
    ...(params ? [params] : []),
  ] as const

export type ListMessagesQueryKey = ReturnType<typeof listMessagesQueryKey>

export function listMessagesQueryOptions(
  {
    conversationId,
    params,
  }: {
    conversationId: ListMessagesPathParams['conversationId']
    params: ListMessagesQueryParams
  },
  config: Partial<RequestConfig> & { client?: typeof fetch } = {},
) {
  const queryKey = listMessagesQueryKey({ conversationId }, params)
  return queryOptions<
    ListMessagesQueryResponse,
    ResponseErrorConfig<
      | ListMessages400
      | ListMessages401
      | ListMessages403
      | ListMessages404
      | ListMessages429
      | ListMessages500
    >,
    ListMessagesQueryResponse,
    typeof queryKey
  >({
    enabled: !!(conversationId && params),
    queryKey,
    queryFn: async ({ signal }) => {
      config.signal = signal
      return listMessages({ conversationId, params }, config)
    },
  })
}

/**
 * @description Get all messages from a conversation
 * {@link /conversations/:conversationId/messages}
 */
export function useListMessages<
  TData = ListMessagesQueryResponse,
  TQueryData = ListMessagesQueryResponse,
  TQueryKey extends QueryKey = ListMessagesQueryKey,
>(
  {
    conversationId,
    params,
  }: {
    conversationId: ListMessagesPathParams['conversationId']
    params: ListMessagesQueryParams
  },
  options: {
    query?: Partial<
      QueryObserverOptions<
        ListMessagesQueryResponse,
        ResponseErrorConfig<
          | ListMessages400
          | ListMessages401
          | ListMessages403
          | ListMessages404
          | ListMessages429
          | ListMessages500
        >,
        TData,
        TQueryData,
        TQueryKey
      >
    > & { client?: QueryClient }
    client?: Partial<RequestConfig> & { client?: typeof fetch }
  } = {},
) {
  const {
    query: { client: queryClient, ...queryOptions } = {},
    client: config = {},
  } = options ?? {}
  const queryKey =
    queryOptions?.queryKey ?? listMessagesQueryKey({ conversationId }, params)

  const query = useQuery(
    {
      ...listMessagesQueryOptions({ conversationId, params }, config),
      queryKey,
      ...queryOptions,
    } as unknown as QueryObserverOptions,
    queryClient,
  ) as UseQueryResult<
    TData,
    ResponseErrorConfig<
      | ListMessages400
      | ListMessages401
      | ListMessages403
      | ListMessages404
      | ListMessages429
      | ListMessages500
    >
  > & {
    queryKey: TQueryKey
  }

  query.queryKey = queryKey as TQueryKey

  return query
}
