/**
 * Generated by Kubb (https://kubb.dev/).
 * Do not edit manually.
 */

import fetch from '../../../client/fetch'
import type { RequestConfig, ResponseErrorConfig } from '../../../client/fetch'
import type {
  StreamAnswerMessageQueryResponse,
  StreamAnswerMessagePathParams,
  StreamAnswerMessageQueryParams,
  StreamAnswerMessage400,
  StreamAnswerMessage401,
  StreamAnswerMessage403,
  StreamAnswerMessage404,
  StreamAnswerMessage429,
  StreamAnswerMessage500,
} from '../types/StreamAnswerMessage'

function getStreamAnswerMessageUrl({
  conversationId,
  messageId,
}: {
  conversationId: StreamAnswerMessagePathParams['conversationId']
  messageId: StreamAnswerMessagePathParams['messageId']
}) {
  return `/conversations/${conversationId}/messages/${messageId}/stream-answer` as const
}

/**
 * @description Stream answer message details
 * {@link /conversations/:conversationId/messages/:messageId/stream-answer}
 */
export async function streamAnswerMessage(
  {
    conversationId,
    messageId,
    params,
  }: {
    conversationId: StreamAnswerMessagePathParams['conversationId']
    messageId: StreamAnswerMessagePathParams['messageId']
    params: StreamAnswerMessageQueryParams
  },
  config: Partial<RequestConfig> & { client?: typeof fetch } = {},
) {
  const { client: request = fetch, ...requestConfig } = config

  const res = await request<
    StreamAnswerMessageQueryResponse,
    ResponseErrorConfig<
      | StreamAnswerMessage400
      | StreamAnswerMessage401
      | StreamAnswerMessage403
      | StreamAnswerMessage404
      | StreamAnswerMessage429
      | StreamAnswerMessage500
    >,
    unknown
  >({
    method: 'GET',
    url: getStreamAnswerMessageUrl({ conversationId, messageId }).toString(),
    params,
    ...requestConfig,
  })
  return res
}
